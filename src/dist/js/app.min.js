function Trader(e,t,a,r,i){this.name=e,this.amount=t,this.inAt=a,this.comment=i,this.isShort=r,this.difference=0,this.drawable=new Drawable,this.drawable.color="#ffffff",this.drawable.borderColor="#B3B369",this.drawable.borderWidth=2,this.drawable.borderScaling=!1,this.drawable.textFont="SourceSansPro",this.drawable.textAnchor=new Vector2D(0,1),this.drawable.textBackground="#ffffff",this.drawable.textPadding=new Vector2D(0,0),this.drawable.textScaling=!1,this.drawable.textPos=new Vector2D(1,-1),this.drawable.textColor="#2C3E50",this.drawable.pos=new Vector2D(0,0),this.drawable.radius=25,this.drawable.show=!1,this["new"]=!0,this.open=!1,this.changeStockPrice=function(e){var r="[b]"+this.name+"[/b][align=right][color=",i=Math.floor((e-this.inAt)*this.amount*100)/100,n="#36B5DB",o="#E74C3C";this.isShort?this.difference=-i:this.difference=i,r+=this.difference>=0?n+"]":o+"]",r+=this.difference.toLocaleString("be-NL",{style:"currency",currency:"EUR"})+"[/color][/align]\n[i][color=",r+=this.isShort?o+"]":n+"]",r+=t,r+=this.isShort?" short at ":" long at ",r+=a.toLocaleString("be-NL",{style:"currency",currency:"EUR"})+"[/color][/i]\n",this.drawable.setText(r+this.comment)},this.draw=function(e,t){if(this.drawable.show){var a=this.drawable.pos.rotate(this.drawable.rotation);e.save(),e.globalAlpha*=this.drawable.opacity,e.translate(a.x,a.y),this.drawable.drawCircle(e),this.drawable.drawImageInCircle(e),this.drawable.drawBorderForCircle(e,t),e.restore()}},this.postDraw=function(e,t){if(this.drawable.show){var a=this.drawable.pos.rotate(this.drawable.rotation);e.save(),e.globalAlpha*=this.drawable.opacity,e.translate(a.x,a.y),this.drawable.drawText(e,t),e.restore()}},this.clicked=function(){var e=this;this.open?(this.drawable.animate("textSize",0,200,"easeInOut",null),this.drawable.animateVector("textPadding",new Vector2D(0,0),200,"easeInOut",function(t,a){t&&(e.open=!1)})):(this.drawable.animate("textSize",12,200,"easeInOut",null),this.drawable.animateVector("textPadding",new Vector2D(10,10),200,"easeInOut",function(t,a){t&&(e.open=!0)}))},this["delete"]=function(e,t){var a=0;"undefined"!=typeof t&&(a=t);for(var r=e.length;r>a;a++)if("undefined"!=typeof e[a].traders){var i=e[a].traders.indexOf(this);if(i>-1){e[a].traders.splice(i,1),e[a].calcTraders(),0===e[a].traders.length&&e[a].animateDelete(e,a);break}}},this.interaction=function(e,t){var a=e.subVector(this.drawable.pos.rotate(this.drawable.rotation).mul(t)),r=0;return 0!==this.drawable.radius&&(r=this.drawable.radius*t),0!==this.drawable.size.length()&&(r=this.drawable.size.length()*t),a.length()<=r&&this.drawable.show?(this["new"]&&(this["new"]=!1,this.drawable.borderColor="#eeeeee"),this):!1}}var Trade=function(e,a,r,i){this.id=e,this.stockPrice=a,this.traders=r,this.drawable=new Drawable,this.difference=0;for(var n=0,o=this.traders.length;o>n;n++)this.traders[n].changeStockPrice(this.stockPrice),this.difference+=this.traders[n].difference;if(this.difference=Math.floor(100*this.difference)/100,this.drawable.setText(this.difference.toLocaleString("be-NL",{style:"currency",currency:"EUR"})),this.difference>=0?(this.drawable.textBackground="#36B5DB",this.drawable.textReplaceColor="#36B5DB"):(this.drawable.textBackground="#E74C3C",this.drawable.textReplaceColor="#E74C3C"),this.lineColor="#B3B369",this.open=!1,this.drawable.textSize=10,this.drawable.radius=Math.floor(35*Math.random()+35),this.drawable.imgFill=!1,null===i){for(var s=Math.floor(Math.random()*window.innerWidth-window.innerWidth/2),d=Math.floor(Math.random()*(window.innerHeight-50)-(window.innerHeight-50)/2);new Vector2D(s,d).length()<100+this.drawable.radius||new Vector2D(s,d).length()>new Vector2D(window.innerWidth,window.innerHeight-50).div(2).length()-this.drawable.radius;)s=Math.floor(Math.random()*window.innerWidth-window.innerWidth/2),d=Math.floor(Math.random()*(window.innerHeight-50)-(window.innerHeight-50)/2);this.drawable.animateVector("pos",new Vector2D(s,d),1e3,"easeInOut",null)}else this.drawable.animateVector("pos",i,1e3,"easeInOut",null);this.drawable.color="#ffffff",this.drawable.borderWidth=2,this.drawable.borderColor="#B3B369",this.drawable.borderScaling=!1,this.drawable.textColor="#ffffff",this.drawable.textFont="SourceSansPro",this.drawable.textAnchor=new Vector2D(.5,.5),this.drawable.textPos=new Vector2D(0,.5),this.drawable.textPadding=new Vector2D(10,10),this.drawable.textReplace=15;var l=this;setInterval(function(){var e=Math.random()/10,t=Math.floor(2*Math.random());1===t&&(e=-e),l.stockPrice=Math.floor(100*(l.stockPrice+e))/100,l.difference=0;for(var a=0,r=l.traders.length;r>a;a++)l.traders[a].changeStockPrice(l.stockPrice),l.difference+=l.traders[a].difference;l.difference=Math.floor(100*l.difference)/100,l.open?(l.difference>=0?l.drawable.textReplaceColor="#36B5DB":l.drawable.textReplaceColor="#E74C3C",l.drawable.textBackground="#2C3E50",l.drawable.setText(l.stockPrice.toLocaleString("be-NL",{style:"currency",currency:"EUR"}))):(l.drawable.setText(l.difference.toLocaleString("be-NL",{style:"currency",currency:"EUR"})),l.difference>=0?(l.drawable.textBackground="#36B5DB",l.drawable.textReplaceColor="#36B5DB"):(l.drawable.textBackground="#E74C3C",l.drawable.textReplaceColor="#E74C3C")),l.drawable.requestRedraw=!0},2e3),this.interaction=function(e,a){var r=e.subVector(this.drawable.pos.mul(a)),i=0;if(0!==this.drawable.radius&&(i=this.drawable.radius*a),0!==this.drawable.size.length()&&(i=this.drawable.size.length()*a),r.length()<=i)return this;for(var n=e.subVector(this.drawable.pos.mul(a)),o=0,s=this.traders.length;s>o;o++){var d=this.traders[o].interaction(n,a);if(d!==!1){for(var l=0,c=this.traders.length;c>l;l++)t=this.traders[l],t.open&&t.clicked();return d}}return!1},this.calcTraders=function(){for(var e=180/(this.traders.length+1),t=0,a=this.traders.length;a>t;t++){var r=e*(t+1-(this.traders.length+1)/2)-90;this.traders[t].drawable.animate("rotation",r,300,"easeInOut",null)}},this.calcTraders(),this.preDraw=function(e,t){if(this.drawable.show){e.save(),e.globalAlpha*=this.drawable.opacity,e.strokeStyle=this.lineColor,e.lineWidth=.5;for(var a=!1,r=0,i=this.traders.length;i>r;r++)this.traders[r]["new"]&&(a=!0);a?this.lineColor="#B3B369":this.lineColor="#2C3E50",e.beginPath(),e.moveTo(0,0),e.lineTo(this.drawable.pos.x,this.drawable.pos.y),e.closePath(),e.stroke(),e.restore()}},this.draw=function(e,t){if(this.drawable.show){e.save(),e.translate(this.drawable.pos.x,this.drawable.pos.y),e.globalAlpha*=this.drawable.opacity;for(var a=!1,r=0,i=this.traders.length;i>r;r++)this.traders[r].draw(e,t),this.traders[r]["new"]&&(a=!0);a?this.drawable.borderColor="#B3B369":this.drawable.borderColor="#eeeeee",this.drawable.drawCircle(e),this.drawable.drawImageInCircle(e),this.drawable.drawBorderForCircle(e,t),this.drawable.drawText(e,t),e.restore()}},this["delete"]=function(e){for(var t=e.indexOf(this),a=0,r=this.traders.length;r>a;a++)this.traders[0]["delete"](e,t)},this.animateDelete=function(e,t){this.drawable.animate("textSize",0,300,"easeInOut",null),this.drawable.animate("textReplace",0,300,"easeInOut",null),this.drawable.animateVector("textPadding",new Vector2D(0,0),300,"easeInOut",null),this.drawable.animate("opacity",0,300,"easeInOut",null),this.drawable.animate("radius",0,300,"easeInOut",function(){e.splice(t,1)})},this.postDraw=function(e,t){if(this.drawable.show){e.save(),e.globalAlpha*=this.drawable.opacity,e.translate(this.drawable.pos.x,this.drawable.pos.y);for(var a=0,r=this.traders.length;r>a;a++)this.traders[a].postDraw(e,t);e.restore()}},this.clicked=function(){var e=0,t=0,a=null,r=this;if(this.open){var i=function(e,t){t.show=!1};for(t=this.traders.length;t>e;e++)a=this.traders[e],a.open&&a.clicked(),a.drawable.animateVector("pos",new Vector2D(0,0),300,"easeInOut",i);this.drawable.animateVector("textPadding",new Vector2D(0,0),150,"easeIn",function(e,t){t.animateVector("textPadding",new Vector2D(10,10),150,"easeOut",null)}),this.drawable.animate("textReplace",0,150,"easeIn",function(e,t){t.animate("textReplace",15,150,"easeOut",null)}),this.drawable.animate("textSize",0,150,"easeIn",function(e,t){t.setText(r.difference.toLocaleString("be-NL",{style:"currency",currency:"EUR"})),r.difference>=0?t.textBackground="#36B5DB":t.textBackground="#E74C3C",r.open=!1,t.animate("textSize",10,150,"easeOut",null)})}else{for(t=this.traders.length;t>e;e++)a=this.traders[e],a.drawable.show=!0,a.drawable.animateVector("pos",new Vector2D(0,this.drawable.radius+a.drawable.radius+15),300,"easeInOut",null);this.drawable.animateVector("textPadding",new Vector2D(0,0),150,"easeIn",function(e,t){t.animateVector("textPadding",new Vector2D(10,10),150,"easeOut",null)}),this.drawable.animate("textReplace",0,150,"easeIn",function(e,t){t.animate("textReplace",15,150,"easeOut",null)}),this.drawable.animate("textSize",0,150,"easeIn",function(e,t){t.textBackground="#2C3E50",t.setText(r.stockPrice.toLocaleString("be-NL",{style:"currency",currency:"EUR"})),r.open=!0,t.animate("textSize",10,150,"easeOut",null)})}},this.requestRedraw=function(){for(var e=0,t=this.traders.length;t>e;e++)this.traders[e].drawable.requestRedraw&&(this.drawable.requestRedraw=!0,this.traders[e].drawable.requestRedraw=!1);return this.drawable.requestRedraw?(this.drawable.requestRedraw=!1,!0):!1}},tradeCanvas=function(e){if(null!==document.getElementById("trades")){var t=[],a=[],r=new Drawable,i=new Drawable;r.setImage(e.profilepicture,function(){p.draw()}),r.radius=100,r.color="#ffffff",r.borderColor="#eeeeee",r.borderScaling=!1,r.borderWidth=2,r.textSize=12,r.textColor="#ffffff",r.textFont="SourceSansPro",r.textAnchor=new Vector2D(.5,.5),r.textPos=new Vector2D(0,.5),r.textPadding=new Vector2D(10,10),r.textReplace=15,r.draw=function(e,t){this.drawCircle(e),this.drawImageInCircle(e),this.drawBorderForCircle(e,t),this.drawText(e,t)},i.setImage("dist/images/misc/trash.svg",function(){p.draw()}),i.radius=50,i.color="#eeeeee",i.borderColor="#eeeeee",i.borderScaling=!1,i.borderWidth=2,i.pos=new Vector2D(window.innerWidth-100,window.innerHeight-150),i.interaction=function(e){var t=e.subVector(p.margin).subVector(this.pos),a=this.radius*p.scale;return t.length()<=a&&this.show},i.draw=function(e,t){var a=this.pos.subVector(p.offset).subVector(p.center).mul(1/p.scale);e.save(),e.translate(a.x,a.y),this.drawCircle(e),this.drawImageInCircle(e),this.drawBorderForCircle(e,t),e.restore()};for(var n=0,o=0,s=e.trades.length;s>o;o++){var d=e.trades[o];if(void 0!==d.StopStockPrice||d.StopStockPrice<0){var l,c;"undefined"==typeof d.parentTrade&&(c=new Trader(e.firstname+" "+e.lastname,d.AmountInvested/d.StartStockPrice,d.StartStockPrice,d.IsShort,d.Comment),c.drawable.setImage(e.profilepicture));for(var h=!1,w=0,u=a.length;u>w;w++)if(l=a[w],l.id===d.Company._id){h=!0,l.traders.push(c);break}h||(l={id:d.Company._id,stockPrice:d.Company.CurrentStockPrice,traders:[c],image:d.Company.Image},a.push(l))}}for(var f=0,b=a.length;b>f;f++){var g=new Trade(a[f].id,a[f].stockPrice,a[f].traders,null);g.drawable.setImage(a[f].image),t.push(g)}t.push(r),t.push(i),n>=0?(r.textBackground="#36B5DB",r.textReplaceColor="#36B5DB"):(r.textBackground="#E74C3C",r.textReplaceColor="#E74C3C"),r.setText((Math.floor(100*n)/100).toLocaleString("be-NL",{style:"currency",currency:"EUR"}));var p=new Canvas(0,50,window.innerWidth,window.innerHeight-50,"trades",t);p.drawCallback=function(){for(var e=0,t=0,a=p.objects.length;a>t;t++)"undefined"!=typeof p.objects[t].difference&&(e+=p.objects[t].difference);e>=0?(r.textBackground="#36B5DB",r.textReplaceColor="#36B5DB"):(r.textBackground="#E74C3C",r.textReplaceColor="#E74C3C"),r.setText((Math.floor(100*e)/100).toLocaleString("be-NL",{style:"currency",currency:"EUR"}))},document.body.addEventListener("touchstart",function(e){e.preventDefault()}),document.getElementById("trades").addEventListener("mousedown",function(e){m(e)}),document.getElementById("trades").addEventListener("touchstart",function(e){var t=e.touches[0];m(t)});var m=function(e){p.interactionStart(e,function(e,t){var a;e instanceof Trade&&(a=p.objects.indexOf(e),p.objects.push(p.objects.splice(a,1)[0])),e instanceof Trader&&(e.drawable.returnPos=e.drawable.pos),"self"===e&&(a=p.objects.indexOf(i),p.objects.splice(a,1),p.objects.push(i),p.draw()),p.selected=e,p.mousePos=t})};document.getElementById("trades").addEventListener("mousemove",function(e){v(e)}),document.getElementById("trades").addEventListener("touchmove",function(e){var t=e.touches[0];v(t)});var v=function(e){p.interactionMove(e,function(t,a,r){t instanceof Trade&&(t.drawable.opacity=.5,t.drawable.pos=a),t instanceof Trader&&(t.drawable.opacity=.5,t.drawable.pos=t.drawable.pos.addVector(r.rotate(-t.drawable.rotation).mul(1/p.scale))),i.interaction(new Vector2D(e.pageX,e.pageY))?i.color="#E74C3C":i.color="#eeeeee",p.draw()})};document.getElementById("trades").addEventListener("mouseup",function(e){x(e)}),document.getElementById("trades").addEventListener("touchend",function(e){var t=e.touches[0];x(t)});var x=function(e){p.interactionStop(function(t,a){var r,n;if(t){if(a instanceof Trade)for(a.drawable.opacity=1,r=0,n=p.objects.length;n>r;r++)p.objects[r].open&&p.objects[r]!==a&&p.objects[r].clicked();if(a instanceof Trader&&(a.drawable.opacity=1),"self"===a)for(r=0,n=p.objects.length;n>r;r++)p.objects[r].open&&p.objects[r].clicked();"function"==typeof a.clicked&&a.clicked()}else a instanceof Trade&&(a.drawable.opacity=1,i.interaction(new Vector2D(e.pageX,e.pageY))&&a["delete"](p.objects)),a instanceof Trader&&(a.drawable.opacity=1,a.drawable.returnPos.length()!==a.drawable.pos.length()&&a.drawable.returnPos.x!==a.drawable.pos.x&&a.drawable.animateVector("pos",a.drawable.returnPos,500,"easeInOut",null),i.interaction(new Vector2D(e.pageX,e.pageY))&&a["delete"](p.objects));i.color="#eeeeee"}),p.draw()};document.getElementById("trades").addEventListener("wheel",function(e){C(e)}),document.getElementById("trades").addEventListener("DOMMouseScroll",function(e){C(e)});var C=function(e){e.preventDefault();var t=0;t="undefined"!=typeof e.wheelDelta?e.wheelDelta/300:-e.detail/50;var a=p.scale+t;a>1.8&&(a=1.8),.4>a&&(a=.4),a=Math.floor(100*a)/100,p.scale=a,i.radius=50/p.scale,document.getElementById("scaleCanvas").value=p.scale,p.draw()};document.getElementById("scaleCanvas").addEventListener("mousemove",function(){p.scale=parseFloat(this.value),i.radius=50/p.scale,p.draw()}),document.getElementById("resetOffset").addEventListener("click",function(){p.moveToCenter()}),window.addEventListener("resize",function(){p.setSize(window.innerWidth,window.innerHeight-50),i.pos=new Vector2D(window.innerWidth-100,window.innerHeight-150)})}};
//# sourceMappingURL=data:application/json;base64,
