function Trade(a,t,e,c,n,s){this.img=null,this.logo=a,this.x=t,this.y=e,this.scX=c,this.scY=n,this.rad=s;var o=this,r=new Image;r.src=this.logo,r.onload=function(){o.img=r,o.logo=null}}function clear(){ctx.fillStyle="#eeeeee",ctx.fillRect(0,0,WIDTH,HEIGHT)}function draw(){clear();for(var a=0;a<trades.length;a++)trades[a].draw()}function myMove(a){dragging===canvas?(xOff+=(a.pageX-mouseX)*(1/scale),yOff+=(a.pageY-mouseY)*(1/scale),mouseX=a.pageX,mouseY=a.pageY):null!==dragging&&(dragging.scX=a.pageX-xOff*scale,dragging.scY=a.pageY-yOff*scale)}function myDown(a){clearInterval(movingCanvas);for(var t=trades.length-1;t>=0;t--){var e=trades[t];if(Math.pow(a.pageX-(e.scX+xOff*scale),2)+Math.pow(a.pageY-(e.scY+yOff*scale),2)<=Math.pow(e.rad*scale,2)){dragging=e,trades.splice(t,1),trades.push(e),canvas.onmousemove=myMove;break}}null===dragging&&(dragging=canvas,mouseX=a.pageX,mouseY=a.pageY,canvas.onmousemove=myMove)}function myUp(){var a=sbfc(dragging.scX,dragging.scY);dragging.x=a[0],dragging.y=a[1],dragging=null,mouseX=null,mouseY=null,canvas.onmousemove=null}Trade.prototype.draw=function(){null===this.logo&&(ctx.fillStyle="#ffffff",cir(this.scX+xOff*scale,this.scY+yOff*scale,this.rad),ctx.save(),ctx.beginPath(),ctx.arc(this.scX+xOff*scale,this.scY+yOff*scale,this.rad*scale,0,2*Math.PI,!0),ctx.clip(),ctx.drawImage(this.img,this.scX-this.rad*scale+xOff*scale,this.scY-this.rad*scale+yOff*scale,this.rad*scale*2,this.rad*scale*2),ctx.restore(),ctx.beginPath(),ctx.arc(this.scX+xOff*scale,this.scY+yOff*scale,this.rad*scale,0,2*Math.PI,!0),ctx.strokeStyle="#eeeeee",ctx.lineWidth=2,ctx.stroke(),ctx.closePath())};var canvas,ctx,WIDTH,HEIGHT,xOff=0,yOff=0,mouseX=null,mouseY=null,trades=[],scale=1,dragging=null,movingCanvas=null,logos=["logo0.png","logo1.jpg","logo2.jpg","logo3.png","logo4.png"];!function(){canvas=document.getElementById("trades"),canvas.width=window.innerWidth,canvas.height=window.innerHeight,canvas.onmousedown=myDown,canvas.onmouseup=myUp,WIDTH=window.innerWidth,HEIGHT=window.innerHeight,ctx=canvas.getContext("2d");for(var a=0;5>a;a++){var t=Math.floor(Math.random()*WIDTH),e=Math.floor(Math.random()*HEIGHT),c=Math.floor(100*Math.random()+50);trades.push(new Trade("dist/images/"+logos[a],t,e,t,e,c))}document.getElementById("scaleCanvas").onmousemove=function(){scale=this.value;for(var a=trades.length-1;a>=0;a--){var t=trades[a],e=sfc(t.x,t.y);t.scX=e[0],t.scY=e[1]}},document.getElementById("resetOffset").onclick=function(){var a=yOff/xOff;movingCanvas=setInterval(function(){xOff-=xOff/30,Math.abs(xOff)<=1&&(xOff=0),yOff=a*xOff,Math.abs(yOff)<=1&&(yOff=0),0===xOff&&0===yOff&&clearInterval(movingCanvas)},10)},setInterval(draw,10)}();var cX=function(){return WIDTH/2},cY=function(){return HEIGHT/2},sfc=function(a,t){var e=(t-cY())/(a-cX()),c=Math.sqrt(Math.pow(a-cX(),2)+Math.pow(t-cY(),2));c*=scale;var n=Math.atan(e)/Math.PI*180;0>n&&(n=-n);var s=90-n,o=c*Math.sin(s/180*Math.PI),r=c*Math.sin(n/180*Math.PI);return a>cX()&&(o=-o),t>cY()&&(r=-r),[cX()-o,cY()-r]},sbfc=function(a,t){var e=(t-cY())/(a-cX()),c=Math.sqrt(Math.pow(a-cX(),2)+Math.pow(t-cY(),2));c*=1/scale;var n=Math.atan(e)/Math.PI*180;0>n&&(n=-n);var s=90-n,o=Math.ceil(c*Math.sin(s/180*Math.PI)),r=Math.ceil(c*Math.sin(n/180*Math.PI));return a>cX()&&(o=-o),t>cY()&&(r=-r),[cX()-o,cY()-r]},rect=function(a,t,e,c){ctx.beginPath();var n=a-e/2,s=t-c/2;ctx.rect(n,s,e*scale,c*scale),ctx.closePath(),ctx.fill()},cir=function(a,t,e){ctx.beginPath(),ctx.arc(a,t,e*scale,0,2*Math.PI,!1),ctx.closePath(),ctx.fill()};!function(){"use strict";var a=angular.module("app",["ngRoute"]);a.config(function(a){a.when("/",{templateUrl:"index.html",controller:"headerController"}).otherwise({redirectTo:"index.html"})})}();
//# sourceMappingURL=data:application/json;base64,
