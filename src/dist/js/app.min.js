function Trader(e,t,a,r,n){this.name=e,this.amount=t,this.inAt=a,this.comment=n,this.type=r,this.difference=0,this.drawable=new Drawable,this.drawable.color="#ffffff",this.drawable.borderColor="#B3B369",this.drawable.borderWidth=2,this.drawable.borderScaling=!1,this.drawable.textFont="SourceSansPro",this.drawable.textAnchor=new Vector2D(0,1),this.drawable.textBackground="#ffffff",this.drawable.textPadding=new Vector2D(0,0),this.drawable.textScaling=!1,this.drawable.textPos=new Vector2D(1,-1),this.drawable.textColor="#2C3E50",this.drawable.pos=new Vector2D(0,0),this.drawable.radius=25,this.drawable.show=!1,this["new"]=!0,this.open=!1,this.changeStockPrice=function(e){var r="[b]"+this.name+"[/b][align=right][color=",n=Math.floor((e-this.inAt)*this.amount*100)/100,i="#36B5DB",o="#E74C3C";0===this.type?this.difference=n:this.difference=-n,r+=this.difference>=0?i+"]":o+"]",r+=this.difference.toLocaleString("be-NL",{style:"currency",currency:"EUR"})+"[/color][/align]\n[i][color=",r+=0===this.type?i+"]":o+"]",r+=t,r+=0===this.type?" long at ":" short at ",r+=a.toLocaleString("be-NL",{style:"currency",currency:"EUR"})+"[/color][/i]\n",this.drawable.setText(r+this.comment)},this.draw=function(e,t){if(this.drawable.show){var a=this.drawable.pos.rotate(this.drawable.rotation);e.save(),e.globalAlpha*=this.drawable.opacity,e.translate(a.x,a.y),this.drawable.drawCircle(e),this.drawable.drawImageInCircle(e),this.drawable.drawBorderForCircle(e,t),e.restore()}},this.postDraw=function(e,t){if(this.drawable.show){var a=this.drawable.pos.rotate(this.drawable.rotation);e.save(),e.globalAlpha*=this.drawable.opacity,e.translate(a.x,a.y),this.drawable.drawText(e,t),e.restore()}},this.clicked=function(){var e=this;this.open?(this.drawable.animate("textSize",0,200,"easeInOut",null),this.drawable.animateVector("textPadding",new Vector2D(0,0),200,"easeInOut",function(t,a){t&&(e.open=!1)})):(this.drawable.animate("textSize",12,200,"easeInOut",null),this.drawable.animateVector("textPadding",new Vector2D(10,10),200,"easeInOut",function(t,a){t&&(e.open=!0)}))},this["delete"]=function(e,t){var a=0;"undefined"!=typeof t&&(a=t);for(var r=e.length;r>a;a++)if("undefined"!=typeof e[a].traders){var n=e[a].traders.indexOf(this);if(n>-1){e[a].traders.splice(n,1),e[a].calcTraders(),0===e[a].traders.length&&e[a].animateDelete(e,a);break}}},this.interaction=function(e,t){var a=e.subVector(this.drawable.pos.rotate(this.drawable.rotation).mul(t)),r=0;return 0!==this.drawable.radius&&(r=this.drawable.radius*t),0!==this.drawable.size.length()&&(r=this.drawable.size.length()*t),a.length()<=r&&this.drawable.show?(this["new"]&&(this["new"]=!1,this.drawable.borderColor="#eeeeee"),this):!1}}var Trade=function(e,a,r){this.stockPrice=e,this.traders=a,this.drawable=new Drawable,this.difference=0;for(var n=0,i=this.traders.length;i>n;n++)this.traders[n].changeStockPrice(this.stockPrice),this.difference+=this.traders[n].difference;if(this.difference=Math.floor(100*this.difference)/100,this.drawable.setText(this.difference.toLocaleString("be-NL",{style:"currency",currency:"EUR"})),this.difference>=0?(this.drawable.textBackground="#36B5DB",this.drawable.textReplaceColor="#36B5DB"):(this.drawable.textBackground="#E74C3C",this.drawable.textReplaceColor="#E74C3C"),this.lineColor="#B3B369",this.open=!1,this.drawable.textSize=10,this.drawable.radius=Math.floor(35*Math.random()+35),this.drawable.imgFill=!1,null===r){for(var o=Math.floor(Math.random()*window.innerWidth-window.innerWidth/2),s=Math.floor(Math.random()*(window.innerHeight-50)-(window.innerHeight-50)/2);new Vector2D(o,s).length()<100+this.drawable.radius||new Vector2D(o,s).length()>new Vector2D(window.innerWidth,window.innerHeight-50).div(2).length()-this.drawable.radius;)o=Math.floor(Math.random()*window.innerWidth-window.innerWidth/2),s=Math.floor(Math.random()*(window.innerHeight-50)-(window.innerHeight-50)/2);this.drawable.animateVector("pos",new Vector2D(o,s),1e3,"easeInOut",null)}else this.drawable.animateVector("pos",r,1e3,"easeInOut",null);this.drawable.color="#ffffff",this.drawable.borderWidth=2,this.drawable.borderColor="#B3B369",this.drawable.borderScaling=!1,this.drawable.textColor="#ffffff",this.drawable.textFont="SourceSansPro",this.drawable.textAnchor=new Vector2D(.5,.5),this.drawable.textPos=new Vector2D(0,.5),this.drawable.textPadding=new Vector2D(10,10),this.drawable.textReplace=15;var d=this;setInterval(function(){var e=Math.random()/10,t=Math.floor(2*Math.random());1===t&&(e=-e),d.stockPrice=Math.floor(100*(d.stockPrice+e))/100,d.difference=0;for(var a=0,r=d.traders.length;r>a;a++)d.traders[a].changeStockPrice(d.stockPrice),d.difference+=d.traders[a].difference;d.difference=Math.floor(100*d.difference)/100,d.open?(d.difference>=0?d.drawable.textReplaceColor="#36B5DB":d.drawable.textReplaceColor="#E74C3C",d.drawable.textBackground="#2C3E50",d.drawable.setText(d.stockPrice.toLocaleString("be-NL",{style:"currency",currency:"EUR"}))):(d.drawable.setText(d.difference.toLocaleString("be-NL",{style:"currency",currency:"EUR"})),d.difference>=0?(d.drawable.textBackground="#36B5DB",d.drawable.textReplaceColor="#36B5DB"):(d.drawable.textBackground="#E74C3C",d.drawable.textReplaceColor="#E74C3C")),d.drawable.requestRedraw=!0},2e3),this.interaction=function(e,a){var r=e.subVector(this.drawable.pos.mul(a)),n=0;if(0!==this.drawable.radius&&(n=this.drawable.radius*a),0!==this.drawable.size.length()&&(n=this.drawable.size.length()*a),r.length()<=n)return this;for(var i=e.subVector(this.drawable.pos.mul(a)),o=0,s=this.traders.length;s>o;o++){var d=this.traders[o].interaction(i,a);if(d!==!1){for(var l=0,c=this.traders.length;c>l;l++)t=this.traders[l],t.open&&t.clicked();return d}}return!1},this.calcTraders=function(){for(var e=180/(this.traders.length+1),t=0,a=this.traders.length;a>t;t++){var r=e*(t+1-(this.traders.length+1)/2)-90;this.traders[t].drawable.animate("rotation",r,300,"easeInOut",null)}},this.calcTraders(),this.preDraw=function(e,t){if(this.drawable.show){e.save(),e.globalAlpha*=this.drawable.opacity,e.strokeStyle=this.lineColor,e.lineWidth=.5;for(var a=!1,r=0,n=this.traders.length;n>r;r++)this.traders[r]["new"]&&(a=!0);a?this.lineColor="#B3B369":this.lineColor="#2C3E50",e.beginPath(),e.moveTo(0,0),e.lineTo(this.drawable.pos.x,this.drawable.pos.y),e.closePath(),e.stroke(),e.restore()}},this.draw=function(e,t){if(this.drawable.show){e.save(),e.translate(this.drawable.pos.x,this.drawable.pos.y),e.globalAlpha*=this.drawable.opacity;for(var a=!1,r=0,n=this.traders.length;n>r;r++)this.traders[r].draw(e,t),this.traders[r]["new"]&&(a=!0);a?this.drawable.borderColor="#B3B369":this.drawable.borderColor="#eeeeee",this.drawable.drawCircle(e),this.drawable.drawImageInCircle(e),this.drawable.drawBorderForCircle(e,t),this.drawable.drawText(e,t),e.restore()}},this["delete"]=function(e){for(var t=e.indexOf(this),a=0,r=this.traders.length;r>a;a++)this.traders[0]["delete"](e,t)},this.animateDelete=function(e,t){this.drawable.animate("textSize",0,300,"easeInOut",null),this.drawable.animate("textReplace",0,300,"easeInOut",null),this.drawable.animateVector("textPadding",new Vector2D(0,0),300,"easeInOut",null),this.drawable.animate("opacity",0,300,"easeInOut",null),this.drawable.animate("radius",0,300,"easeInOut",function(){e.splice(t,1)})},this.postDraw=function(e,t){if(this.drawable.show){e.save(),e.globalAlpha*=this.drawable.opacity,e.translate(this.drawable.pos.x,this.drawable.pos.y);for(var a=0,r=this.traders.length;r>a;a++)this.traders[a].postDraw(e,t);e.restore()}},this.clicked=function(){var e=0,t=0,a=null,r=this;if(this.open){var n=function(e,t){t.show=!1};for(t=this.traders.length;t>e;e++)a=this.traders[e],a.open&&a.clicked(),a.drawable.animateVector("pos",new Vector2D(0,0),300,"easeInOut",n);this.drawable.animateVector("textPadding",new Vector2D(0,0),150,"easeIn",function(e,t){t.animateVector("textPadding",new Vector2D(10,10),150,"easeOut",null)}),this.drawable.animate("textReplace",0,150,"easeIn",function(e,t){t.animate("textReplace",15,150,"easeOut",null)}),this.drawable.animate("textSize",0,150,"easeIn",function(e,t){t.setText(r.difference.toLocaleString("be-NL",{style:"currency",currency:"EUR"})),r.difference>=0?t.textBackground="#36B5DB":t.textBackground="#E74C3C",r.open=!1,t.animate("textSize",10,150,"easeOut",null)})}else{for(t=this.traders.length;t>e;e++)a=this.traders[e],a.drawable.show=!0,a.drawable.animateVector("pos",new Vector2D(0,this.drawable.radius+a.drawable.radius+15),300,"easeInOut",null);this.drawable.animateVector("textPadding",new Vector2D(0,0),150,"easeIn",function(e,t){t.animateVector("textPadding",new Vector2D(10,10),150,"easeOut",null)}),this.drawable.animate("textReplace",0,150,"easeIn",function(e,t){t.animate("textReplace",15,150,"easeOut",null)}),this.drawable.animate("textSize",0,150,"easeIn",function(e,t){t.textBackground="#2C3E50",t.setText(r.stockPrice.toLocaleString("be-NL",{style:"currency",currency:"EUR"})),r.open=!0,t.animate("textSize",10,150,"easeOut",null)})}},this.requestRedraw=function(){for(var e=0,t=this.traders.length;t>e;e++)this.traders[e].drawable.requestRedraw&&(this.drawable.requestRedraw=!0,this.traders[e].drawable.requestRedraw=!1);return this.drawable.requestRedraw?(this.drawable.requestRedraw=!1,!0):!1}},tradeCanvas=function(){if(null!==document.getElementById("trades")){var e=[],t=[],a=new Drawable,r=new Drawable,n=["logo0.svg","logo1.svg","logo2.svg","logo3.svg","logo4.svg"],i=[["Crazy Heffe","trader0.jpg"],["Marino Hostino","trader1.jpg"],["Nicolsh Lavanda","trader2.jpg"],["xXrobke69Xx","trader3.jpg"]];a.setImage("dist/images/profiles/profile.jpg"),a.radius=100,a.color="#ffffff",a.borderColor="#eeeeee",a.borderScaling=!1,a.borderWidth=2,a.textSize=12,a.textColor="#ffffff",a.textFont="SourceSansPro",a.textAnchor=new Vector2D(.5,.5),a.textPos=new Vector2D(0,.5),a.textPadding=new Vector2D(10,10),a.textReplace=15,r.setImage("dist/images/misc/trash.svg"),r.radius=50,r.color="#eeeeee",r.borderColor="#eeeeee",r.borderScaling=!1,r.borderWidth=2,r.pos=new Vector2D(window.innerWidth-100,window.innerHeight-150);for(var o=0;4>o;o++){var s=Math.floor(50*Math.random()),d=Math.floor(2e4*Math.random())/100,l=Math.floor(2*Math.random()),c=[s,d,l];t.push(c)}for(var h=0,w=0;5>w;w++){for(var f=Math.ceil(4*Math.random()),u=[],b=Math.floor(200*Math.random()*100)/100,g=0;f>g;g++){var p=new Trader(i[g][0],t[g][0],t[g][1],t[g][2],"This looks good!\nI can even put a second line\n\nAnd even more");p.drawable.setImage("dist/images/profiles/"+i[g][1],function(){v.draw()}),p.percentage=.4*Math.random()+.1,u.push(p)}var m=new Trade(b,u,null);h+=m.difference,m.drawable.setImage("dist/images/logos/"+n[w],function(){v.draw()}),e.push(m)}e.push(a),e.push(r),h>=0?(a.textBackground="#36B5DB",a.textReplaceColor="#36B5DB"):(a.textBackground="#E74C3C",a.textReplaceColor="#E74C3C"),a.setText((Math.floor(100*h)/100).toLocaleString("be-NL",{style:"currency",currency:"EUR"}));var v=new Canvas(0,50,window.innerWidth,window.innerHeight-50,"trades",e);v.drawCallback=function(){for(var e=0,t=0,r=v.objects.length;r>t;t++)"undefined"!=typeof v.objects[t].difference&&(e+=v.objects[t].difference);e>=0?(a.textBackground="#36B5DB",a.textReplaceColor="#36B5DB"):(a.textBackground="#E74C3C",a.textReplaceColor="#E74C3C"),a.setText((Math.floor(100*e)/100).toLocaleString("be-NL",{style:"currency",currency:"EUR"}))},a.draw=function(e,t){this.drawCircle(e),this.drawImageInCircle(e),this.drawBorderForCircle(e,t),this.drawText(e,t)},r.interaction=function(e){var t=e.subVector(v.margin).subVector(this.pos),a=this.radius*v.scale;return t.length()<=a&&this.show},r.draw=function(e,t){var a=this.pos.subVector(v.offset).subVector(v.center).mul(1/v.scale);e.save(),e.translate(a.x,a.y),this.drawCircle(e),this.drawImageInCircle(e),this.drawBorderForCircle(e,t),e.restore()},v.draw(),document.getElementById("trades").addEventListener("mousedown",function(e){x(e)}),document.getElementById("trades").addEventListener("touchstart",function(e){var t=e.touches[0];x(t)});var x=function(e){v.interactionStart(e,function(e,t){var a;e instanceof Trade&&(a=v.objects.indexOf(e),v.objects.push(v.objects.splice(a,1)[0])),e instanceof Trader&&(e.drawable.returnPos=e.drawable.pos),"self"===e&&(a=v.objects.indexOf(r),v.objects.splice(a,1),v.objects.push(r),v.draw()),v.selected=e,v.mousePos=t})};document.getElementById("trades").addEventListener("mousemove",function(e){C(e)}),document.getElementById("trades").addEventListener("touchmove",function(e){var t=e.touches[0];C(t)});var C=function(e){v.interactionMove(e,function(t,a,n){t instanceof Trade&&(t.drawable.opacity=.5,t.drawable.pos=a),t instanceof Trader&&(t.drawable.opacity=.5,t.drawable.pos=t.drawable.pos.addVector(n.rotate(-t.drawable.rotation).mul(1/v.scale))),r.interaction(new Vector2D(e.pageX,e.pageY))?r.color="#E74C3C":r.color="#eeeeee",v.draw()})};document.getElementById("trades").addEventListener("mouseup",function(e){y(e)}),document.getElementById("trades").addEventListener("touchend",function(e){var t=e.touches[0];y(t)}),document.body.addEventListener("touchstart",function(e){e.preventDefault()});var y=function(e){v.interactionStop(function(t,a){var n,i;if(t){if(a instanceof Trade)for(a.drawable.opacity=1,n=0,i=v.objects.length;i>n;n++)v.objects[n].open&&v.objects[n]!==a&&v.objects[n].clicked();if(a instanceof Trader&&(a.drawable.opacity=1),"self"===a)for(n=0,i=v.objects.length;i>n;n++)v.objects[n].open&&v.objects[n].clicked();"function"==typeof a.clicked&&a.clicked()}else a instanceof Trade&&(a.drawable.opacity=1,r.interaction(new Vector2D(e.pageX,e.pageY))&&a["delete"](v.objects)),a instanceof Trader&&(a.drawable.opacity=1,a.drawable.returnPos.length()!==a.drawable.pos.length()&&a.drawable.returnPos.x!==a.drawable.pos.x&&a.drawable.animateVector("pos",a.drawable.returnPos,500,"easeInOut",null),r.interaction(new Vector2D(e.pageX,e.pageY))&&a["delete"](v.objects));r.color="#eeeeee"}),v.draw()};document.getElementById("trades").addEventListener("wheel",function(e){B(e)}),document.getElementById("trades").addEventListener("DOMMouseScroll",function(e){B(e)});var B=function(e){e.preventDefault();var t=0;t="undefined"!=typeof e.wheelDelta?e.wheelDelta/300:-e.detail/50;var a=v.scale+t;a>1.8&&(a=1.8),.4>a&&(a=.4),a=Math.floor(100*a)/100,v.scale=a,r.radius=50/v.scale,document.getElementById("scaleCanvas").value=v.scale,v.draw()};document.getElementById("scaleCanvas").addEventListener("mousemove",function(){v.scale=parseFloat(this.value),r.radius=50/v.scale,v.draw()}),document.getElementById("resetOffset").addEventListener("click",function(){v.moveToCenter()}),window.addEventListener("resize",function(){v.setSize(window.innerWidth,window.innerHeight-50),r.pos=new Vector2D(window.innerWidth-100,window.innerHeight-150)})}};
//# sourceMappingURL=data:application/json;base64,
