Math.square=function(t){return t*t},Math.toRadians=function(t){return t*Math.PI/180},Math.toDegrees=function(t){return 180*t/Math.PI};var Vector2D=function(t,i){this.x=t,this.y=i};Vector2D.prototype={length:function(){return Math.sqrt(Math.square(this.x)+Math.square(this.y))},dot:function(t){return this.x*t.x+this.y*t.y},normalize:function(){var t=this.length();this.x/=t,this.y/=t},add:function(t){return new Vector2D(this.x+t,this.y+t)},addVector:function(t){return new Vector2D(this.x+t.x,this.y+t.y)},sub:function(t){return new Vector2D(this.x-t,this.y-t)},subVector:function(t){return new Vector2D(this.x-t.x,this.y-t.y)},mul:function(t){return new Vector2D(this.x*t,this.y*t)},mulVector:function(t){return new Vector2D(this.x*t.x,this.y*t.y)},div:function(t){return new Vector2D(this.x/t,this.y/t)},divVector:function(t){return new Vector2D(this.x/t.x,this.y/t.y)},rotate:function(t){var i=Math.toRadians(t),e=Math.cos(i),s=Math.sin(i);return new Vector2D(this.x*e-this.y*s,this.x*s+this.y*e)}};var Animation=function(t,i,e,s,h,o){this.element=t,this.from=i,this.difference=e-i,this.easing=h,this.cb=o,this.pos=0,this.end=s/10,this.timer=null};Animation.prototype.start=function(t){var i=this;this.timer=setInterval(function(){i.pos++;var e=0;switch(i.easing){case"linear":e=i.linear(i.difference,i.pos,i.end,i.from);break;case"easeIn":e=i.easeIn(i.difference,i.pos,i.end,i.from);break;case"easeOut":e=i.easeOut(i.difference,i.pos,i.end,i.from);break;case"easeInOut":e=i.easeInOut(i.difference,i.pos,i.end,i.from)}t(e),i.pos>=i.end&&(clearInterval(i.timer),i.timer=null,i.pos=0,"function"==typeof i.cb&&i.cb(!0,i.element))},10)},Animation.prototype.stop=function(){clearInterval(this.timer),this.timer=null,"function"==typeof this.cb&&this.cb(!1,this.element)},Animation.prototype.linear=function(t,i,e,s){return t*i/e+s},Animation.prototype.easeIn=function(t,i,e,s){return i/=e,t*i*i+s},Animation.prototype.easeOut=function(t,i,e,s){return i/=e,-t*i*(i-2)+s},Animation.prototype.easeInOut=function(t,i,e,s){return i/=e/2,1>i?t/2*i*i+s:(i--,-t/2*(i*(i-2)-1)+s)};var Paragraph=function(t){this.parts=[],this.checkForStyle(t,"[i]","[/i]","italic")||this.checkForStyle(t,"[b]","[/b]","bold")||this.checkForStyle(t,"[size=","[/size]","size")||this.checkForStyle(t,"[font=","[/font]","font")||this.checkForStyle(t,"[align=","[/align]","align")||this.checkForStyle(t,"[color=","[/color]","color")||(this.parts=[t])};Paragraph.prototype.getFont=function(t,i,e,s){return"undefined"!=typeof this.italic&&(t=this.italic),"undefined"!=typeof this.bold&&(i=this.bold),"undefined"!=typeof this.size&&(e=this.size),"undefined"!=typeof this.font&&(s=this.font),[t,i,e,s]},Paragraph.prototype.fontToText=function(t,i,e,s){var h="";return t&&(h+="italic "),i&&(h+="bold "),h+=e+"pt "+s},Paragraph.prototype.draw=function(t,i,e,s,h,o,r,n,a,c,l){var u=this.getFont(e,s,h,o),f=c.x;if("undefined"!=typeof this.align&&(r=this.align),"undefined"!=typeof this.color&&(n=this.color),1!==this.parts.length||this.parts[0]instanceof Paragraph){for(var d=0,g=this.parts.length;g>d;d++)if("function"==typeof this.parts[d].draw&&this.parts[d].draw(t,i,u[0],u[1],u[2],u[3],r,n,a,c,l),1===this.parts[d].length&&"function"==typeof this.parts[d].measure){var p=this.parts[d].measure(t,i,u[0],u[1],u[2],u[3],a);c.x+=p.x}c.x=f}else a||(u[2]*=1/i),"center"===r&&(c=c.addVector(new Vector2D(l,0).mul(.5))),"right"===r&&(c=c.addVector(new Vector2D(l,0))),t.font=this.fontToText(u[0],u[1],u[2],u[3]),t.textAlign=r,t.fillStyle=n,t.fillText(this.parts[0],c.x,c.y)},Paragraph.prototype.measure=function(t,i,e,s,h,o,r){var n=new Vector2D(0,0),a=this.getFont(e,s,h,o);if(1===this.parts.length)r||(a[2]*=1/i),t.font=this.fontToText(a[0],a[1],a[2],a[3]),n.y=a[2],n.x=t.measureText(this.parts[0]).width;else for(var c=0,l=this.parts.length;l>c;c++)if("function"==typeof this.parts[c].measure){var u=this.parts[c].measure(t,i,a[0],a[1],a[2],a[3],r);u.y>n.y&&(n.y=u.y),n.x+=u.x}return n},Paragraph.prototype.checkForStyle=function(t,i,e,s){var h=t.split(i);if(h.length>=2){var o=h.shift();o.length>0&&!(o instanceof Paragraph)?this.parts.push(new Paragraph(o)):o instanceof Paragraph&&this.parts.push(o);for(var r=0,n=h.length;n>r;r++){var a=h[r].split(e);if(i.indexOf("=")>-1){a[0]=a[0].split("]");for(var c=a[0].shift(),l="",u=0,f=a[0].length;f>u;u++)l+=a[0][u],f-1>u&&(l+="]");a[0]=l}var d=new Paragraph(a[0]);switch(0!==a[1].length||a[1]instanceof Paragraph?a[1]instanceof Paragraph?(this.parts.push(d),this.parts.push(a[1])):(this.parts.push(d),this.parts.push(new Paragraph(a[1]))):this.parts.push(d),s){case"italic":d.italic=!0;break;case"bold":d.bold=!0;break;case"size":d.size=c;break;case"font":d.font=c;break;case"align":d.align=c;break;case"color":d.color=c}}return!0}return!1};var Drawable=function(){this.color="#000000",this.img=null,this.imgFill=!0,this.scale=!0,this.borderColor="#000000",this.borderWidth=0,this.borderScaling=!0,this.text=[],this.textItalic=!1,this.textBold=!1,this.textSize=0,this.textMinSize=6,this.textFont="Arial",this.textAlign="left",this.textColor="#000000",this.textPos=new Vector2D(0,0),this.textAnchor=new Vector2D(0,0),this.textBackground=null,this.textReplace=20,this.textReplaceColor=null,this.textSpacing=1.2,this.textPadding=new Vector2D(0,0),this.textScaling=!0,this.opacity=1,this.rotation=0,this.pos=new Vector2D(0,0),this.radius=0,this.size=new Vector2D(0,0),this.show=!0,this.requestRedraw=!1,this.animations=[],this.drawRectangle=function(t){t.fillStyle=this.color;var i=new Vector2D(0,0).subVector(this.size.div(2));t.fillRect(i.x,i.y,this.size.x,this.size.y)},this.drawImage=function(t){if(null!==this.img){var i=0;i=this.imgFill?this.img.width>this.img.height?this.img.height:this.img.width:this.img.width>this.img.height?this.img.width:this.img.height;var e=new Vector2D(this.img.width,this.img.height).div(i).mulVector(this.size).subVector(this.size).mul(-.5),s=new Vector2D(0,0).subVector(this.size.div(2));this.scale||e.mul(),t.drawImage(this.img,e.x,e.y,this.size.x,this.size.y,s.x,s.y,this.size.x,this.size.y)}else console.log("[DRAWABLE][drawImage]: Could not draw image for",this,"since this.img is null")},this.drawBorder=function(t,i){t.strokeStyle=this.borderColor;var e=this.borderWidth;this.borderScaling||(e*=1/i),t.lineWidth=e;var s=new Vector2D(0,0).subVector(this.size.div(2));t.strokeRect(s.x,s.y,this.size.x,this.size.y)},this.drawCircle=function(t){t.fillStyle=this.color,t.beginPath(),t.arc(0,0,this.radius,0,2*Math.PI,!1),t.closePath(),t.fill()},this.drawImageInCircle=function(t){if(null!==this.img){t.save(),t.beginPath(),t.arc(0,0,this.radius,0,2*Math.PI,!0),t.clip();var i=1,e=new Vector2D(0,0).sub(this.radius),s=new Vector2D(this.radius,this.radius).mul(2),h=new Vector2D(0,0);if(this.imgFill)i=this.img.width>this.img.height?this.img.height:this.img.width,h=new Vector2D(this.img.width,this.img.height).div(i).sub(1).mul(i).div(2);else{i=this.img.width>this.img.height?this.img.width:this.img.height;var o=new Vector2D(this.img.width,this.img.height).div(i).sub(1).mul(-1);0!==o.x&&(o.x=1),0!==o.y&&(o.y=1),s=new Vector2D(this.img.width,this.img.height).div(i).mulVector(s),e=e.subVector(o.mulVector(s).div(2)),e=e.addVector(o.mul(this.radius))}t.drawImage(this.img,h.x,h.y,this.img.width-2*h.x,this.img.height-2*h.y,e.x,e.y,s.x,s.y),t.closePath(),t.restore()}else console.log("[DRAWABLE][drawImageInCircle]: Could not draw image for",this,"since this.img is null")},this.drawBorderForCircle=function(t,i){t.beginPath(),t.strokeStyle=this.borderColor;var e=this.borderWidth;this.borderScaling||(e*=1/i),t.lineWidth=e,t.arc(0,0,this.radius,0,2*Math.PI,!0),t.stroke(),t.closePath()},this.drawText=function(t,i){if(null!==this.text){var e=this.textSize;if(this.textScaling&&(e*=i),e>=this.textMinSize){var s=0,h=0,o=0,r=0,n=new Vector2D(0,0);for(r=this.text.length;r>o;o++){var a=this.text[o].measure(t,i,this.textItalic,this.textBold,this.textSize,this.textFont,this.textScaling);if(a.x>s&&(s=a.x),h+=a.y,r-o>1){var c=this.textSpacing*this.textSize;this.textScaling||(c*=1/i),h+=c}}if(null!==this.textBackground){t.fillStyle=this.textBackground;var l=this.textPadding;this.textScaling||(l=l.mul(1/i));var u=l.mul(2).addVector(new Vector2D(s,h)),f=this.textPos;0!==this.radius&&(f=f.mul(this.radius)),0!==this.size.length()&&(f=f.mulVector(this.size));var d=f.subVector(u.mulVector(this.textAnchor));t.fillRect(d.x,d.y,u.x,u.y),n=d.addVector(l)}for(o=0,r=this.text.length;r>o;o++){t.fillStyle=this.textColor;var g=this.text[o].measure(t,i,this.textItalic,this.textBold,this.textSize,this.textFont,this.textScaling).y,p=this.textSpacing*this.textSize;this.textScaling||(p*=1/i),g+=p,this.text[o].draw(t,i,this.textItalic,this.textBold,this.textSize,this.textFont,this.textAlign,this.textColor,this.textScaling,n,s),n=n.addVector(new Vector2D(0,g))}}else if(null!==this.textReplaceColor){t.fillStyle=this.textReplaceColor;var x;this.textReplace instanceof Vector2D?(x=this.textPos.mulVector(this.size).subVector(this.textReplace.mulVector(this.textAnchor)),t.fillRect(x.x,x.y,this.textReplace.x,this.textReplace.y)):this.textReplace>0&&(x=this.textPos.mul(this.radius).subVector(this.textAnchor.sub(.5).mul(this.textReplace)),t.beginPath(),t.arc(x.x,x.y,this.textReplace,0,2*Math.PI,!1),t.closePath(),t.fill())}}else console.log("[DRAWABLE][drawText]: Could not draw text for",this,"since this.text is null")},this.animate=function(t,i,e,s,h){var o=new Animation(this,this[t],i,e,s,h);this.animations.push(o);var r=this;return o.start(function(i){r[t]=i,r.requestRedraw=!0}),o},this.animateVector=function(t,i,e,s,h){var o=this,r=new Animation(this,this[t].x,i.x,e,s,h),n=new Animation(this,this[t].y,i.y,e,s,h);this.animations.push(r),this.animations.push(n),r.start(function(i){o[t].x=i,o.requestRedraw=!0}),n.start(function(i){o[t].y=i,o.requestRedraw=!0})},this.stopAnimation=function(t){t.stop();var i=this.animations.indexOf(t);i>-1&&this.animations.splice(i,1)},this.stopAnimating=function(){for(var t=this.animations.length-1;t>=0;t--)this.animations[t].stop();this.animations=[]}};Drawable.prototype.setImage=function(t,i){this.img=new Image,this.img.src=t,"function"==typeof i&&this.show&&(this.img.onload=i)},Drawable.prototype.setText=function(t){this.text=[];for(var i=t.split("\n"),e=0,s=i.length;s>e;e++)this.text.push(new Paragraph(i[e]))},Drawable.prototype.interaction=function(t,i){var e=t.subVector(this.pos.rotate(this.rotation).mul(i)),s=0;return 0!==this.radius&&(s=this.radius*i),0!==this.size.length()&&(s=this.size.length()*i),e.length()<=s&&this.show?this:!1};var Canvas=function(t,i,e,s,h,o){this.width=e,this.height=s,this.margin=new Vector2D(t,i),this.ctx=document.getElementById(h).getContext("2d"),this.ctx.canvas.width=e,this.ctx.canvas.height=s,this.center=new Vector2D(e/2,s/2),this.offset=new Vector2D(0,0),this.scale=1,this.objects=o,this.selected=null,this.startPos=new Vector2D(0,0),this.mousePos=new Vector2D(0,0),this.focus=null,this.movingCanvas=null,this.drawCallback=null;var r=this;setInterval(function(){var t=!1;r.ctx.save(),r.ctx.textBaseline="hanging";var i=r.center.addVector(r.offset);r.ctx.setTransform(r.scale,0,0,r.scale,i.x,i.y);for(var e=0,s=r.objects.length;s>e;e++)"function"==typeof r.objects[e].requestRedraw?r.objects[e].requestRedraw()&&(t=!0):r.objects[e].requestRedraw&&(t=!0,r.objects[e].requestRedraw=!1);r.ctx.restore(),t&&r.draw()},10)};Canvas.prototype.setSize=function(t,i){this.width=t,this.height=i,this.ctx.canvas.width=t,this.ctx.canvas.height=i,this.draw()},Canvas.prototype.clear=function(){this.ctx.clearRect(0,0,this.width,this.height)},Canvas.prototype.draw=function(t){"function"==typeof this.drawCallback&&this.drawCallback(),this.clear(),this.ctx.save(),this.ctx.textBaseline="hanging";var i=this.center.addVector(this.offset);this.ctx.setTransform(this.scale,0,0,this.scale,i.x,i.y);var e,s;for(e=0,s=this.objects.length;s>e;e++)"function"==typeof this.objects[e].preDraw&&this.objects[e].preDraw(this.ctx,this.scale);for(e=0,s=this.objects.length;s>e;e++)this.objects[e].draw(this.ctx,this.scale);for(e=0,s=this.objects.length;s>e;e++)"function"==typeof this.objects[e].postDraw&&this.objects[e].postDraw(this.ctx,this.scale);this.ctx.restore(),"function"==typeof t&&t()},Canvas.prototype.findObjectOnCanvas=function(t){for(var i=!1,e=this.objects.length-1;e>=0;e--){var s=this.objects[e].interaction(this.mousePos,this.scale);if(s!==!1){t(s),i=!0;break}}i||t(null)},Canvas.prototype.moveToCenter=function(t){if(null===this.movingCanvas){var i=this;this.movingCanvas=setInterval(function(){0===i.offset.x&&0===i.offset.y&&(clearInterval(i.movingCanvas),i.movingCanvas=null);var e=i.offset;e=e.div(30),i.offset=i.offset.subVector(e),Math.abs(i.offset.x)<=1&&(i.offset.x=0),Math.abs(i.offset.y)<=1&&(i.offset.y=0),"function"==typeof t&&t(),i.draw()},10)}},Canvas.prototype.interactionStart=function(t,i){clearInterval(this.movingCanvas),this.movingCanvas=null,this.mousePos=new Vector2D(t.pageX,t.pageY),this.mousePos=this.mousePos.subVector(this.margin),this.mousePos=this.mousePos.subVector(this.center),this.mousePos=this.mousePos.subVector(this.offset);var e=this.mousePos,s=this.offset;this.findObjectOnCanvas(function(t){var h=t;null===h&&(h="self",e=e.addVector(s)),"function"==typeof i&&i(h,e)})},Canvas.prototype.interactionMove=function(t,i){var e=new Vector2D(t.pageX,t.pageY);e=e.subVector(this.margin),e=e.subVector(this.center);var s=e.subVector(this.mousePos);this.mousePos=e,"self"===this.selected?(this.startPos=this.startPos.addVector(s),this.offset=this.offset.addVector(s),this.draw()):null!==this.selected&&(this.startPos=this.startPos.addVector(s),this.mousePos=this.mousePos.subVector(this.offset),i(this.selected,this.mousePos.mul(1/this.scale),s.subVector(this.offset)))},Canvas.prototype.interactionStop=function(t){this.startPos.length()<=10?t(!0,this.selected):t(!1,this.selected),this.startPos=new Vector2D(0,0),this.selected=null,this.mousePos=new Vector2D(0,0)};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGguanMiLCJhbmltYXRpb24uanMiLCJwYXJhZ3JhcGguanMiLCJkcmF3YWJsZS5qcyIsImNhbnZhcy5qcyJdLCJuYW1lcyI6WyJNYXRoIiwic3F1YXJlIiwieCIsInRvUmFkaWFucyIsIlBJIiwidG9EZWdyZWVzIiwiVmVjdG9yMkQiLCJ5IiwidGhpcyIsInByb3RvdHlwZSIsImxlbmd0aCIsInNxcnQiLCJkb3QiLCJ2MiIsIm5vcm1hbGl6ZSIsImwiLCJhZGQiLCJ6IiwiYWRkVmVjdG9yIiwic3ViIiwic3ViVmVjdG9yIiwibXVsIiwibXVsVmVjdG9yIiwiZGl2IiwiZGl2VmVjdG9yIiwicm90YXRlIiwiYW5nbGUiLCJyIiwiY29zIiwic2luIiwiQW5pbWF0aW9uIiwiZWxlbWVudCIsImZyb20iLCJnb2FsIiwidGltZSIsImVhc2luZyIsImNiIiwiZGlmZmVyZW5jZSIsInBvcyIsImVuZCIsInRpbWVyIiwic3RhcnQiLCJtZSIsInNldEludGVydmFsIiwidmFsIiwibGluZWFyIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCIsImNsZWFySW50ZXJ2YWwiLCJzdG9wIiwiYyIsInQiLCJkIiwiYiIsIlBhcmFncmFwaCIsInRleHQiLCJwYXJ0cyIsImNoZWNrRm9yU3R5bGUiLCJnZXRGb250IiwiaXRhbGljIiwiYm9sZCIsInNpemUiLCJmb250IiwiZm9udFRvVGV4dCIsImRyYXciLCJjdHgiLCJzY2FsZSIsImFsaWduIiwiY29sb3IiLCJzY2FsaW5nIiwid2lkdGgiLCJmIiwiaSIsIm1lYXN1cmUiLCJzIiwidGV4dEFsaWduIiwiZmlsbFN0eWxlIiwiZmlsbFRleHQiLCJtZWFzdXJlVGV4dCIsInBhcnRTaXplIiwib3BlbmluZyIsImNsb3NpbmciLCJzdHlsZSIsInRlbXAiLCJzcGxpdCIsInNoaWZ0IiwicHVzaCIsInAiLCJpbmRleE9mIiwidiIsImoiLCJtIiwic3R5bGVkIiwiRHJhd2FibGUiLCJpbWciLCJpbWdGaWxsIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsImJvcmRlclNjYWxpbmciLCJ0ZXh0SXRhbGljIiwidGV4dEJvbGQiLCJ0ZXh0U2l6ZSIsInRleHRNaW5TaXplIiwidGV4dEZvbnQiLCJ0ZXh0Q29sb3IiLCJ0ZXh0UG9zIiwidGV4dEFuY2hvciIsInRleHRCYWNrZ3JvdW5kIiwidGV4dFJlcGxhY2UiLCJ0ZXh0UmVwbGFjZUNvbG9yIiwidGV4dFNwYWNpbmciLCJ0ZXh0UGFkZGluZyIsInRleHRTY2FsaW5nIiwib3BhY2l0eSIsInJvdGF0aW9uIiwicmFkaXVzIiwic2hvdyIsInJlcXVlc3RSZWRyYXciLCJhbmltYXRpb25zIiwiZHJhd1JlY3RhbmdsZSIsImZpbGxSZWN0IiwiZHJhd0ltYWdlIiwiaGVpZ2h0IiwiY2xpcCIsImNvbnNvbGUiLCJsb2ciLCJkcmF3Qm9yZGVyIiwic3Ryb2tlU3R5bGUiLCJicmR3IiwibGluZVdpZHRoIiwic3Ryb2tlUmVjdCIsImRyYXdDaXJjbGUiLCJiZWdpblBhdGgiLCJhcmMiLCJjbG9zZVBhdGgiLCJmaWxsIiwiZHJhd0ltYWdlSW5DaXJjbGUiLCJzYXZlIiwicmF0aW8iLCJyZXN0b3JlIiwiZHJhd0JvcmRlckZvckNpcmNsZSIsInN0cm9rZSIsImRyYXdUZXh0IiwidyIsImgiLCJwYXJhZ3JhcGhQb3MiLCJwYXJhZ3JhcGhTaXplIiwic3BhY2luZyIsInBhZGRpbmciLCJibG9ja1NpemUiLCJ0eHRQb3MiLCJibG9ja1BvcyIsInNwYWNlIiwicmVwbGFjZVBvcyIsImFuaW1hdGUiLCJwcm9wZXJ0eSIsInJlc3VsdCIsImFuaW1hdGlvbiIsImFuaW1hdGVWZWN0b3IiLCJhbmltWCIsImFuaW1ZIiwic3RvcEFuaW1hdGlvbiIsImluZGV4Iiwic3BsaWNlIiwic3RvcEFuaW1hdGluZyIsInNldEltYWdlIiwiaW1nU3JjIiwiSW1hZ2UiLCJzcmMiLCJvbmxvYWQiLCJzZXRUZXh0IiwidHh0IiwiaW50ZXJhY3Rpb24iLCJtb3VzZVBvcyIsIm1vdXNlRGlmZmVyZW5jZSIsIkNhbnZhcyIsImVsZW1lbnRJZCIsIm9iamVjdHMiLCJtYXJnaW4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsImNhbnZhcyIsImNlbnRlciIsIm9mZnNldCIsInNlbGVjdGVkIiwic3RhcnRQb3MiLCJmb2N1cyIsIm1vdmluZ0NhbnZhcyIsImRyYXdDYWxsYmFjayIsInJlZHJhdyIsInRleHRCYXNlbGluZSIsInNldFRyYW5zZm9ybSIsInNldFNpemUiLCJjbGVhciIsImNsZWFyUmVjdCIsInByZURyYXciLCJwb3N0RHJhdyIsImZpbmRPYmplY3RPbkNhbnZhcyIsImZvdW5kIiwibyIsIm1vdmVUb0NlbnRlciIsImFicyIsImludGVyYWN0aW9uU3RhcnQiLCJlIiwicGFnZVgiLCJwYWdlWSIsImludGVyYWN0aW9uTW92ZSIsIm5ld1BvcyIsImludGVyYWN0aW9uU3RvcCJdLCJtYXBwaW5ncyI6IkFBQUFBLEtBQUFDLE9BQUEsU0FBQUMsR0FDQSxNQUFBQSxHQUFBQSxHQUdBRixLQUFBRyxVQUFBLFNBQUFELEdBQ0EsTUFBQUEsR0FBQUYsS0FBQUksR0FBQSxLQUdBSixLQUFBSyxVQUFBLFNBQUFILEdBQ0EsTUFBQSxLQUFBQSxFQUFBRixLQUFBSSxHQUdBLElBQUFFLFVBQUEsU0FBQUosRUFBQUssR0FDQUMsS0FBQU4sRUFBQUEsRUFDQU0sS0FBQUQsRUFBQUEsRUFHQUQsVUFBQUcsV0FDQUMsT0FBQSxXQUNBLE1BQUFWLE1BQUFXLEtBQUFYLEtBQUFDLE9BQUFPLEtBQUFOLEdBQUFGLEtBQUFDLE9BQUFPLEtBQUFELEtBRUFLLElBQUEsU0FBQUMsR0FDQSxNQUFBTCxNQUFBTixFQUFBVyxFQUFBWCxFQUFBTSxLQUFBRCxFQUFBTSxFQUFBTixHQUVBTyxVQUFBLFdBQ0EsR0FBQUMsR0FBQVAsS0FBQUUsUUFDQUYsTUFBQU4sR0FBQWEsRUFDQVAsS0FBQUQsR0FBQVEsR0FFQUMsSUFBQSxTQUFBQyxHQUNBLE1BQUEsSUFBQVgsVUFBQUUsS0FBQU4sRUFBQWUsRUFBQVQsS0FBQUQsRUFB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V0FJQVQsT0FBQXZLLFVBQUF5TSxnQkFBQSxTQUFBOUssR0FDQTVCLEtBQUFtTCxTQUFBakwsVUFBQSxHQUNBMEIsR0FBQSxFQUFBNUIsS0FBQWtMLFVBRUF0SixHQUFBLEVBQUE1QixLQUFBa0wsVUFFQWxMLEtBQUFtTCxTQUFBLEdBQUFyTCxVQUFBLEVBQUEsR0FDQUUsS0FBQWtMLFNBQUEsS0FDQWxMLEtBQUFzSyxTQUFBLEdBQUF4SyxVQUFBLEVBQUEiLCJmaWxlIjoiY2FudmFzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIk1hdGguc3F1YXJlID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ICogeDtcbn07XG5cbk1hdGgudG9SYWRpYW5zID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAqIE1hdGguUEkpIC8gMTgwO1xufTtcblxuTWF0aC50b0RlZ3JlZXMgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuICh4ICogMTgwKSAvIE1hdGguUEk7XG59O1xuXG52YXIgVmVjdG9yMkQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xufTtcblxuVmVjdG9yMkQucHJvdG90eXBlID0ge1xuICAgIGxlbmd0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5zcXVhcmUodGhpcy54KSArIE1hdGguc3F1YXJlKHRoaXMueSkpO1xuICAgIH0sXG4gICAgZG90OiBmdW5jdGlvbih2Mikge1xuICAgICAgICByZXR1cm4gKHRoaXMueCAqIHYyLngpICsgKHRoaXMueSAqIHYyLnkpO1xuICAgIH0sXG4gICAgbm9ybWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGwgPSB0aGlzLmxlbmd0aCgpO1xuICAgICAgICB0aGlzLnggLz0gbDtcbiAgICAgICAgdGhpcy55IC89IGw7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uKHopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh0aGlzLnggKyB6LCB0aGlzLnkgKyB6KTtcbiAgICB9LFxuICAgIGFkZFZlY3RvcjogZnVuY3Rpb24odjIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh0aGlzLnggKyB2Mi54LCB0aGlzLnkgKyB2Mi55KTtcbiAgICB9LFxuICAgIHN1YjogZnVuY3Rpb24oeikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHRoaXMueCAtIHosIHRoaXMueSAtIHopO1xuICAgIH0sXG4gICAgc3ViVmVjdG9yOiBmdW5jdGlvbih2Mikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHRoaXMueCAtIHYyLngsIHRoaXMueSAtIHYyLnkpO1xuICAgIH0sXG4gICAgbXVsOiBmdW5jdGlvbih6KSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMkQodGhpcy54ICogeiwgdGhpcy55ICogeik7XG4gICAgfSxcbiAgICBtdWxWZWN0b3I6IGZ1bmN0aW9uKHYyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMkQodGhpcy54ICogdjIueCwgdGhpcy55ICogdjIueSk7XG4gICAgfSxcbiAgICBkaXY6IGZ1bmN0aW9uKHopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh0aGlzLnggLyB6LCB0aGlzLnkgLyB6KTtcbiAgICB9LFxuICAgIGRpdlZlY3RvcjogZnVuY3Rpb24odjIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh0aGlzLnggLyB2Mi54LCB0aGlzLnkgLyB2Mi55KTtcbiAgICB9LFxuICAgIHJvdGF0ZTogZnVuY3Rpb24oYW5nbGUpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLnRvUmFkaWFucyhhbmdsZSk7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhyKTtcbiAgICAgICAgdmFyIHNpbiA9IE1hdGguc2luKHIpO1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKCh0aGlzLnggKiBjb3MpIC0gKHRoaXMueSAqIHNpbiksICh0aGlzLnggKiBzaW4pICsgKHRoaXMueSAqIGNvcykpO1xuICAgIH1cbn07IiwidmFyIEFuaW1hdGlvbiA9IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb20sIGdvYWwsIHRpbWUsIGVhc2luZywgY2IpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgdGhpcy5kaWZmZXJlbmNlID0gZ29hbCAtIGZyb207XG5cbiAgICB0aGlzLmVhc2luZyA9IGVhc2luZztcbiAgICB0aGlzLmNiID0gY2I7XG5cbiAgICB0aGlzLnBvcyA9IDA7XG4gICAgdGhpcy5lbmQgPSB0aW1lIC8gMTA7XG4gICAgdGhpcy50aW1lciA9IG51bGw7XG59O1xuXG5BbmltYXRpb24ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oY2IpIHtcbiAgICB2YXIgbWUgPSB0aGlzO1xuICAgIHRoaXMudGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgbWUucG9zKys7XG4gICAgICAgIHZhciB2YWwgPSAwO1xuICAgICAgICBzd2l0Y2gobWUuZWFzaW5nKSB7XG4gICAgICAgICAgICBjYXNlIFwibGluZWFyXCI6XG4gICAgICAgICAgICAgICAgdmFsID0gbWUubGluZWFyKG1lLmRpZmZlcmVuY2UsIG1lLnBvcywgbWUuZW5kLCBtZS5mcm9tKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJlYXNlSW5cIjpcbiAgICAgICAgICAgICAgICB2YWwgPSBtZS5lYXNlSW4obWUuZGlmZmVyZW5jZSwgbWUucG9zLCBtZS5lbmQsIG1lLmZyb20pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVhc2VPdXRcIjpcbiAgICAgICAgICAgICAgICB2YWwgPSBtZS5lYXNlT3V0KG1lLmRpZmZlcmVuY2UsIG1lLnBvcywgbWUuZW5kLCBtZS5mcm9tKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJlYXNlSW5PdXRcIjpcbiAgICAgICAgICAgICAgICB2YWwgPSBtZS5lYXNlSW5PdXQobWUuZGlmZmVyZW5jZSwgbWUucG9zLCBtZS5lbmQsIG1lLmZyb20pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNiKHZhbCk7XG4gICAgICAgIGlmKG1lLnBvcyA+PSBtZS5lbmQpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwobWUudGltZXIpO1xuICAgICAgICAgICAgbWUudGltZXIgPSBudWxsO1xuICAgICAgICAgICAgbWUucG9zID0gMDtcbiAgICAgICAgICAgIGlmKHR5cGVvZiBtZS5jYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG1lLmNiKHRydWUsIG1lLmVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgMTApO1xufTtcblxuQW5pbWF0aW9uLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTtcbiAgICB0aGlzLnRpbWVyID0gbnVsbDtcbiAgICBpZih0eXBlb2YgdGhpcy5jYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLmNiKGZhbHNlLCB0aGlzLmVsZW1lbnQpO1xuICAgIH1cbn07XG5cbkFuaW1hdGlvbi5wcm90b3R5cGUubGluZWFyID0gZnVuY3Rpb24oYywgdCwgZCwgYikge1xuICAgIHJldHVybiAoYyAqIHQgLyBkICsgYik7XG59O1xuXG5BbmltYXRpb24ucHJvdG90eXBlLmVhc2VJbiA9IGZ1bmN0aW9uKGMsIHQsIGQsIGIpIHtcbiAgICB0IC89IGQ7XG4gICAgcmV0dXJuIChjICogdCAqIHQgKyBiKTtcbn07XG5cbkFuaW1hdGlvbi5wcm90b3R5cGUuZWFzZU91dCA9IGZ1bmN0aW9uKGMsIHQsIGQsIGIpIHtcbiAgICB0IC89IGQ7XG4gICAgcmV0dXJuICgtYyAqIHQgKiAodC0yKSArIGIpO1xufTtcblxuQW5pbWF0aW9uLnByb3RvdHlwZS5lYXNlSW5PdXQgPSBmdW5jdGlvbihjLCB0LCBkLCBiKSB7XG4gICAgdCAvPSBkIC8gMjtcbiAgICBpZiAodCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIChjLzIqdCp0ICsgYik7XG4gICAgfVxuICAgIHQtLTtcbiAgICByZXR1cm4gKC1jIC8gMiAqICh0ICogKHQgLSAyKSAtIDEpICsgYik7XG59OyIsInZhciBQYXJhZ3JhcGggPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdGhpcy5wYXJ0cyA9IFtdO1xuXG4gICAgaWYoIXRoaXMuY2hlY2tGb3JTdHlsZSh0ZXh0LCBcIltpXVwiLCBcIlsvaV1cIiwgXCJpdGFsaWNcIikpIHtcbiAgICAgICAgaWYoIXRoaXMuY2hlY2tGb3JTdHlsZSh0ZXh0LCBcIltiXVwiLCBcIlsvYl1cIiwgXCJib2xkXCIpKSB7XG4gICAgICAgICAgICBpZighdGhpcy5jaGVja0ZvclN0eWxlKHRleHQsIFwiW3NpemU9XCIsIFwiWy9zaXplXVwiLCBcInNpemVcIikpIHtcbiAgICAgICAgICAgICAgICBpZighdGhpcy5jaGVja0ZvclN0eWxlKHRleHQsIFwiW2ZvbnQ9XCIsIFwiWy9mb250XVwiLCBcImZvbnRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuY2hlY2tGb3JTdHlsZSh0ZXh0LCBcIlthbGlnbj1cIiwgXCJbL2FsaWduXVwiLCBcImFsaWduXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5jaGVja0ZvclN0eWxlKHRleHQsIFwiW2NvbG9yPVwiLCBcIlsvY29sb3JdXCIsIFwiY29sb3JcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRzID0gW3RleHRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuUGFyYWdyYXBoLnByb3RvdHlwZS5nZXRGb250ID0gZnVuY3Rpb24oaXRhbGljLCBib2xkLCBzaXplLCBmb250KSB7XG4gICAgaWYodHlwZW9mIHRoaXMuaXRhbGljICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpdGFsaWMgPSB0aGlzLml0YWxpYztcbiAgICB9XG4gICAgaWYodHlwZW9mIHRoaXMuYm9sZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYm9sZCA9IHRoaXMuYm9sZDtcbiAgICB9XG4gICAgaWYodHlwZW9mIHRoaXMuc2l6ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgaWYodHlwZW9mIHRoaXMuZm9udCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZm9udCA9IHRoaXMuZm9udDtcbiAgICB9XG4gICAgcmV0dXJuIFtpdGFsaWMsIGJvbGQsIHNpemUsIGZvbnRdO1xufTtcblxuUGFyYWdyYXBoLnByb3RvdHlwZS5mb250VG9UZXh0ID0gZnVuY3Rpb24oaXRhbGljLCBib2xkLCBzaXplLCBmb250KSB7XG4gICAgdmFyIHQgPSBcIlwiO1xuICAgIGlmKGl0YWxpYykge1xuICAgICAgICB0ICs9IFwiaXRhbGljIFwiO1xuICAgIH1cbiAgICBpZihib2xkKSB7XG4gICAgICAgIHQgKz0gXCJib2xkIFwiO1xuICAgIH1cbiAgICB0ICs9IHNpemUgKyBcInB0IFwiICsgZm9udDtcbiAgICByZXR1cm4gdDtcbn07XG5cblBhcmFncmFwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGN0eCwgc2NhbGUsIGl0YWxpYywgYm9sZCwgc2l6ZSwgZm9udCwgYWxpZ24sIGNvbG9yLCBzY2FsaW5nLCBwb3MsIHdpZHRoKSB7XG4gICAgdmFyIGYgPSB0aGlzLmdldEZvbnQoaXRhbGljLCBib2xkLCBzaXplLCBmb250KTtcbiAgICB2YXIgeCA9IHBvcy54O1xuICAgIGlmKHR5cGVvZiB0aGlzLmFsaWduICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhbGlnbiA9IHRoaXMuYWxpZ247XG4gICAgfVxuICAgIGlmKHR5cGVvZiB0aGlzLmNvbG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb2xvciA9IHRoaXMuY29sb3I7XG4gICAgfVxuICAgIGlmKHRoaXMucGFydHMubGVuZ3RoID09PSAxICYmICEodGhpcy5wYXJ0c1swXSBpbnN0YW5jZW9mIFBhcmFncmFwaCkpIHtcbiAgICAgICAgaWYoIXNjYWxpbmcpIHtcbiAgICAgICAgICAgIGZbMl0gKj0gMSAvIHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIGlmKGFsaWduID09PSBcImNlbnRlclwiKSB7XG4gICAgICAgICAgICBwb3MgPSBwb3MuYWRkVmVjdG9yKG5ldyBWZWN0b3IyRCh3aWR0aCwgMCkubXVsKC41KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoYWxpZ24gPT09IFwicmlnaHRcIikge1xuICAgICAgICAgICAgcG9zID0gcG9zLmFkZFZlY3RvcihuZXcgVmVjdG9yMkQod2lkdGgsIDApKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZm9udCA9IHRoaXMuZm9udFRvVGV4dChmWzBdLCBmWzFdLCBmWzJdLCBmWzNdKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IGFsaWduO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgIGN0eC5maWxsVGV4dCh0aGlzLnBhcnRzWzBdLCBwb3MueCwgcG9zLnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5wYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmKHR5cGVvZiB0aGlzLnBhcnRzW2ldLmRyYXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRzW2ldLmRyYXcoY3R4LCBzY2FsZSwgZlswXSwgZlsxXSwgZlsyXSwgZlszXSwgYWxpZ24sIGNvbG9yLCBzY2FsaW5nLCBwb3MsIHdpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHRoaXMucGFydHNbaV0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHRoaXMucGFydHNbaV0ubWVhc3VyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMucGFydHNbaV0ubWVhc3VyZShjdHgsIHNjYWxlLCBmWzBdLCBmWzFdLCBmWzJdLCBmWzNdLCBzY2FsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zLnggKz0gcy54O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3MueCA9IHg7XG4gICAgfVxufTtcblxuUGFyYWdyYXBoLnByb3RvdHlwZS5tZWFzdXJlID0gZnVuY3Rpb24oY3R4LCBzY2FsZSwgaXRhbGljLCBib2xkLCBzaXplLCBmb250LCBzY2FsaW5nKSB7XG4gICAgdmFyIHMgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG4gICAgdmFyIGYgPSB0aGlzLmdldEZvbnQoaXRhbGljLCBib2xkLCBzaXplLCBmb250KTtcbiAgICBpZih0aGlzLnBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZighc2NhbGluZykge1xuICAgICAgICAgICAgZlsyXSAqPSAxIC8gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZvbnQgPSB0aGlzLmZvbnRUb1RleHQoZlswXSwgZlsxXSwgZlsyXSwgZlszXSk7XG4gICAgICAgIHMueSA9IGZbMl07XG4gICAgICAgIHMueCA9IGN0eC5tZWFzdXJlVGV4dCh0aGlzLnBhcnRzWzBdKS53aWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMucGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5wYXJ0c1tpXS5tZWFzdXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRTaXplID0gdGhpcy5wYXJ0c1tpXS5tZWFzdXJlKGN0eCwgc2NhbGUsIGZbMF0sIGZbMV0sIGZbMl0sIGZbM10sIHNjYWxpbmcpO1xuICAgICAgICAgICAgICAgIGlmKHBhcnRTaXplLnkgPiBzLnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcy55ID0gcGFydFNpemUueTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcy54ICs9IHBhcnRTaXplLng7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHM7XG59O1xuXG5QYXJhZ3JhcGgucHJvdG90eXBlLmNoZWNrRm9yU3R5bGUgPSBmdW5jdGlvbih0ZXh0LCBvcGVuaW5nLCBjbG9zaW5nLCBzdHlsZSkge1xuICAgIHZhciB0ZW1wID0gdGV4dC5zcGxpdChvcGVuaW5nKTtcbiAgICBpZih0ZW1wLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHZhciB0ID0gdGVtcC5zaGlmdCgpO1xuICAgICAgICBpZih0Lmxlbmd0aCA+IDAgJiYgISh0IGluc3RhbmNlb2YgUGFyYWdyYXBoKSkge1xuICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKG5ldyBQYXJhZ3JhcGgodCkpO1xuICAgICAgICB9IGVsc2UgaWYodCBpbnN0YW5jZW9mIFBhcmFncmFwaCkge1xuICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSB0ZW1wLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSB0ZW1wW2ldLnNwbGl0KGNsb3NpbmcpO1xuICAgICAgICAgICAgaWYob3BlbmluZy5pbmRleE9mKFwiPVwiKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcFswXSA9IHBbMF0uc3BsaXQoXCJdXCIpO1xuICAgICAgICAgICAgICAgIHZhciB2ID0gcFswXS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHZhciBzcGxpdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBqID0gMCwgbSA9IHBbMF0ubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ICs9IHBbMF1bal07XG4gICAgICAgICAgICAgICAgICAgIGlmKGogPCBtIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXQgKz0gXCJdXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcFswXSA9IHNwbGl0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0eWxlZCA9IG5ldyBQYXJhZ3JhcGgocFswXSk7XG5cbiAgICAgICAgICAgIGlmKHBbMV0ubGVuZ3RoID09PSAwICYmICEocFsxXSBpbnN0YW5jZW9mIFBhcmFncmFwaCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goc3R5bGVkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihwWzFdIGluc3RhbmNlb2YgUGFyYWdyYXBoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHN0eWxlZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHBbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goc3R5bGVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2gobmV3IFBhcmFncmFwaChwWzFdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2goc3R5bGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiaXRhbGljXCI6XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlZC5pdGFsaWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm9sZFwiOlxuICAgICAgICAgICAgICAgICAgICBzdHlsZWQuYm9sZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzaXplXCI6XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlZC5zaXplID0gdjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZvbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVkLmZvbnQgPSB2O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWxpZ25cIjpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVkLmFsaWduID0gdjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbG9yXCI6XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlZC5jb2xvciA9IHY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59OyIsInZhciBEcmF3YWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29sb3IgPSBcIiMwMDAwMDBcIjtcbiAgICB0aGlzLmltZyA9IG51bGw7XG4gICAgdGhpcy5pbWdGaWxsID0gdHJ1ZTtcbiAgICB0aGlzLnNjYWxlID0gdHJ1ZTtcblxuICAgIHRoaXMuYm9yZGVyQ29sb3IgPSBcIiMwMDAwMDBcIjtcbiAgICB0aGlzLmJvcmRlcldpZHRoID0gMDtcbiAgICB0aGlzLmJvcmRlclNjYWxpbmcgPSB0cnVlO1xuXG4gICAgdGhpcy50ZXh0ID0gW107XG4gICAgdGhpcy50ZXh0SXRhbGljID0gZmFsc2U7XG4gICAgdGhpcy50ZXh0Qm9sZCA9IGZhbHNlO1xuICAgIHRoaXMudGV4dFNpemUgPSAwO1xuICAgIHRoaXMudGV4dE1pblNpemUgPSA2O1xuICAgIHRoaXMudGV4dEZvbnQgPSBcIkFyaWFsXCI7XG4gICAgdGhpcy50ZXh0QWxpZ24gPSBcImxlZnRcIjtcbiAgICB0aGlzLnRleHRDb2xvciA9IFwiIzAwMDAwMFwiO1xuICAgIHRoaXMudGV4dFBvcyA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICB0aGlzLnRleHRBbmNob3IgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG4gICAgdGhpcy50ZXh0QmFja2dyb3VuZCA9IG51bGw7XG4gICAgdGhpcy50ZXh0UmVwbGFjZSA9IDIwO1xuICAgIHRoaXMudGV4dFJlcGxhY2VDb2xvciA9IG51bGw7XG4gICAgdGhpcy50ZXh0U3BhY2luZyA9IDEuMjtcbiAgICB0aGlzLnRleHRQYWRkaW5nID0gbmV3IFZlY3RvcjJEKDAsIDApO1xuICAgIHRoaXMudGV4dFNjYWxpbmcgPSB0cnVlO1xuXG4gICAgdGhpcy5vcGFjaXR5ID0gMTtcbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcbiAgICB0aGlzLnBvcyA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICB0aGlzLnJhZGl1cyA9IDA7XG4gICAgdGhpcy5zaXplID0gbmV3IFZlY3RvcjJEKDAsIDApO1xuXG4gICAgdGhpcy5zaG93ID0gdHJ1ZTtcbiAgICB0aGlzLnJlcXVlc3RSZWRyYXcgPSBmYWxzZTtcbiAgICB0aGlzLmFuaW1hdGlvbnMgPSBbXTtcblxuICAgIHRoaXMuZHJhd1JlY3RhbmdsZSA9IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcbiAgICAgICAgdmFyIHAgPSBuZXcgVmVjdG9yMkQoMCwgMCkuc3ViVmVjdG9yKHRoaXMuc2l6ZS5kaXYoMikpO1xuICAgICAgICBjdHguZmlsbFJlY3QocC54LCBwLnksIHRoaXMuc2l6ZS54LCB0aGlzLnNpemUueSk7XG4gICAgfTtcbiAgICB0aGlzLmRyYXdJbWFnZSA9IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICBpZih0aGlzLmltZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGRpdiA9IDA7XG4gICAgICAgICAgICBpZih0aGlzLmltZ0ZpbGwpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmltZy53aWR0aCA+IHRoaXMuaW1nLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGl2ID0gdGhpcy5pbWcud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmltZy53aWR0aCA+IHRoaXMuaW1nLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy53aWR0aDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNsaXAgPSBuZXcgVmVjdG9yMkQodGhpcy5pbWcud2lkdGgsIHRoaXMuaW1nLmhlaWdodCkuZGl2KGRpdikubXVsVmVjdG9yKHRoaXMuc2l6ZSkuc3ViVmVjdG9yKHRoaXMuc2l6ZSkubXVsKC0uNSk7XG4gICAgICAgICAgICB2YXIgcCA9IG5ldyBWZWN0b3IyRCgwLCAwKS5zdWJWZWN0b3IodGhpcy5zaXplLmRpdigyKSk7XG4gICAgICAgICAgICBpZighdGhpcy5zY2FsZSkge1xuICAgICAgICAgICAgICAgIGNsaXAubXVsKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIGNsaXAueCwgY2xpcC55LCB0aGlzLnNpemUueCwgdGhpcy5zaXplLnksIHAueCwgcC55LCB0aGlzLnNpemUueCwgdGhpcy5zaXplLnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbRFJBV0FCTEVdW2RyYXdJbWFnZV06IENvdWxkIG5vdCBkcmF3IGltYWdlIGZvclwiLCB0aGlzLCBcInNpbmNlIHRoaXMuaW1nIGlzIG51bGxcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZHJhd0JvcmRlciA9IGZ1bmN0aW9uKGN0eCwgc2NhbGUpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5ib3JkZXJDb2xvcjtcbiAgICAgICAgdmFyIGJyZHcgPSB0aGlzLmJvcmRlcldpZHRoO1xuICAgICAgICBpZighdGhpcy5ib3JkZXJTY2FsaW5nKSB7XG4gICAgICAgICAgICBicmR3ICo9IDEgLyBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVdpZHRoID0gYnJkdztcbiAgICAgICAgdmFyIHAgPSBuZXcgVmVjdG9yMkQoMCwgMCkuc3ViVmVjdG9yKHRoaXMuc2l6ZS5kaXYoMikpO1xuICAgICAgICBjdHguc3Ryb2tlUmVjdChwLngsIHAueSwgdGhpcy5zaXplLngsIHRoaXMuc2l6ZS55KTtcbiAgICB9O1xuXG4gICAgdGhpcy5kcmF3Q2lyY2xlID0gZnVuY3Rpb24oY3R4KSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5hcmMoMCwgMCwgdGhpcy5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICB9O1xuICAgIHRoaXMuZHJhd0ltYWdlSW5DaXJjbGUgPSBmdW5jdGlvbihjdHgpIHtcbiAgICAgICAgaWYodGhpcy5pbWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHguYXJjKDAsIDAsIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICAgICAgdmFyIGRpdiA9IDE7XG4gICAgICAgICAgICB2YXIgcCA9IG5ldyBWZWN0b3IyRCgwLCAwKS5zdWIodGhpcy5yYWRpdXMpO1xuICAgICAgICAgICAgdmFyIHMgPSBuZXcgVmVjdG9yMkQodGhpcy5yYWRpdXMsIHRoaXMucmFkaXVzKS5tdWwoMik7XG4gICAgICAgICAgICB2YXIgY2xpcCA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICAgICAgICAgIGlmKHRoaXMuaW1nRmlsbCkge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuaW1nLndpZHRoID4gdGhpcy5pbWcuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpdiA9IHRoaXMuaW1nLmhlaWdodDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2xpcCA9IG5ldyBWZWN0b3IyRCh0aGlzLmltZy53aWR0aCwgdGhpcy5pbWcuaGVpZ2h0KS5kaXYoZGl2KS5zdWIoMSkubXVsKGRpdikuZGl2KDIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmltZy53aWR0aCA+IHRoaXMuaW1nLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy53aWR0aDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByYXRpbyA9IG5ldyBWZWN0b3IyRCh0aGlzLmltZy53aWR0aCwgdGhpcy5pbWcuaGVpZ2h0KS5kaXYoZGl2KS5zdWIoMSkubXVsKC0xKTtcbiAgICAgICAgICAgICAgICBpZihyYXRpby54ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhdGlvLnggPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihyYXRpby55ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhdGlvLnkgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzID0gbmV3IFZlY3RvcjJEKHRoaXMuaW1nLndpZHRoLCB0aGlzLmltZy5oZWlnaHQpLmRpdihkaXYpLm11bFZlY3RvcihzKTtcbiAgICAgICAgICAgICAgICBwID0gcC5zdWJWZWN0b3IocmF0aW8ubXVsVmVjdG9yKHMpLmRpdigyKSk7XG4gICAgICAgICAgICAgICAgcCA9IHAuYWRkVmVjdG9yKHJhdGlvLm11bCh0aGlzLnJhZGl1cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltZywgY2xpcC54LCBjbGlwLnksIHRoaXMuaW1nLndpZHRoIC0gKGNsaXAueCAqIDIpLCB0aGlzLmltZy5oZWlnaHQgLSAoY2xpcC55ICogMiksIHAueCwgcC55LCBzLngsIHMueSk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbRFJBV0FCTEVdW2RyYXdJbWFnZUluQ2lyY2xlXTogQ291bGQgbm90IGRyYXcgaW1hZ2UgZm9yXCIsIHRoaXMsIFwic2luY2UgdGhpcy5pbWcgaXMgbnVsbFwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5kcmF3Qm9yZGVyRm9yQ2lyY2xlID0gZnVuY3Rpb24oY3R4LCBzY2FsZSkge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuYm9yZGVyQ29sb3I7XG4gICAgICAgIHZhciBicmR3ID0gdGhpcy5ib3JkZXJXaWR0aDtcbiAgICAgICAgaWYoIXRoaXMuYm9yZGVyU2NhbGluZykge1xuICAgICAgICAgICAgYnJkdyAqPSAxIC8gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJyZHc7XG4gICAgICAgIGN0eC5hcmMoMCwgMCwgdGhpcy5yYWRpdXMsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfTtcblxuICAgIHRoaXMuZHJhd1RleHQgPSBmdW5jdGlvbihjdHgsIHNjYWxlKSB7XG4gICAgICAgIGlmKHRoaXMudGV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHRleHRTaXplID0gdGhpcy50ZXh0U2l6ZTtcbiAgICAgICAgICAgIGlmKHRoaXMudGV4dFNjYWxpbmcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0U2l6ZSAqPSBzY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHRleHRTaXplID49IHRoaXMudGV4dE1pblNpemUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdyA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGggPSAwO1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFncmFwaFBvcyA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICAgICAgICAgICAgICBmb3IobCA9IHRoaXMudGV4dC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFncmFwaFNpemUgPSB0aGlzLnRleHRbaV0ubWVhc3VyZShjdHgsIHNjYWxlLCB0aGlzLnRleHRJdGFsaWMsIHRoaXMudGV4dEJvbGQsIHRoaXMudGV4dFNpemUsIHRoaXMudGV4dEZvbnQsIHRoaXMudGV4dFNjYWxpbmcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYWdyYXBoU2l6ZS54ID4gdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdyA9IHBhcmFncmFwaFNpemUueDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBoICs9IHBhcmFncmFwaFNpemUueTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGwgLSBpID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwYWNpbmcgPSB0aGlzLnRleHRTcGFjaW5nICogdGhpcy50ZXh0U2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50ZXh0U2NhbGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNpbmcgKj0gMSAvIHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaCArPSBzcGFjaW5nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRoaXMudGV4dEJhY2tncm91bmQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMudGV4dEJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy50ZXh0UGFkZGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMudGV4dFNjYWxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmcgPSBwYWRkaW5nLm11bCgxIC8gc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBwYWRkaW5nLm11bCgyKS5hZGRWZWN0b3IobmV3IFZlY3RvcjJEKHcsIGgpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR4dFBvcyA9IHRoaXMudGV4dFBvcztcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5yYWRpdXMgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4dFBvcyA9IHR4dFBvcy5tdWwodGhpcy5yYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuc2l6ZS5sZW5ndGgoKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHh0UG9zID0gdHh0UG9zLm11bFZlY3Rvcih0aGlzLnNpemUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9ja1BvcyA9IHR4dFBvcy5zdWJWZWN0b3IoYmxvY2tTaXplLm11bFZlY3Rvcih0aGlzLnRleHRBbmNob3IpKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGJsb2NrUG9zLngsIGJsb2NrUG9zLnksIGJsb2NrU2l6ZS54LCBibG9ja1NpemUueSk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaFBvcyA9IGJsb2NrUG9zLmFkZFZlY3RvcihwYWRkaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yKGkgPSAwLCBsID0gdGhpcy50ZXh0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy50ZXh0Q29sb3I7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLnRleHRbaV0ubWVhc3VyZShjdHgsIHNjYWxlLCB0aGlzLnRleHRJdGFsaWMsIHRoaXMudGV4dEJvbGQsIHRoaXMudGV4dFNpemUsIHRoaXMudGV4dEZvbnQsIHRoaXMudGV4dFNjYWxpbmcpLnk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFjZSA9IHRoaXMudGV4dFNwYWNpbmcgKiB0aGlzLnRleHRTaXplO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGV4dFNjYWxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlICo9IDEgLyBzY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgKz0gc3BhY2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dFtpXS5kcmF3KGN0eCwgc2NhbGUsIHRoaXMudGV4dEl0YWxpYywgdGhpcy50ZXh0Qm9sZCwgdGhpcy50ZXh0U2l6ZSwgdGhpcy50ZXh0Rm9udCwgdGhpcy50ZXh0QWxpZ24sIHRoaXMudGV4dENvbG9yLCB0aGlzLnRleHRTY2FsaW5nLCBwYXJhZ3JhcGhQb3MsIHcpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhQb3MgPSBwYXJhZ3JhcGhQb3MuYWRkVmVjdG9yKG5ldyBWZWN0b3IyRCgwLCBoZWlnaHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMudGV4dFJlcGxhY2VDb2xvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy50ZXh0UmVwbGFjZUNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZVBvcztcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy50ZXh0UmVwbGFjZSBpbnN0YW5jZW9mIFZlY3RvcjJEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlUG9zID0gdGhpcy50ZXh0UG9zLm11bFZlY3Rvcih0aGlzLnNpemUpLnN1YlZlY3Rvcih0aGlzLnRleHRSZXBsYWNlLm11bFZlY3Rvcih0aGlzLnRleHRBbmNob3IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChyZXBsYWNlUG9zLngsIHJlcGxhY2VQb3MueSwgdGhpcy50ZXh0UmVwbGFjZS54LCB0aGlzLnRleHRSZXBsYWNlLnkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodGhpcy50ZXh0UmVwbGFjZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VQb3MgPSB0aGlzLnRleHRQb3MubXVsKHRoaXMucmFkaXVzKS5zdWJWZWN0b3IodGhpcy50ZXh0QW5jaG9yLnN1YigwLjUpLm11bCh0aGlzLnRleHRSZXBsYWNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYXJjKHJlcGxhY2VQb3MueCwgcmVwbGFjZVBvcy55LCB0aGlzLnRleHRSZXBsYWNlLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RSQVdBQkxFXVtkcmF3VGV4dF06IENvdWxkIG5vdCBkcmF3IHRleHQgZm9yXCIsIHRoaXMsIFwic2luY2UgdGhpcy50ZXh0IGlzIG51bGxcIik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5hbmltYXRlID0gZnVuY3Rpb24ocHJvcGVydHksIHJlc3VsdCwgdGltZSwgZWFzaW5nLCBjYikge1xuICAgICAgICB2YXIgYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbih0aGlzLCB0aGlzW3Byb3BlcnR5XSwgcmVzdWx0LCB0aW1lLCBlYXNpbmcsIGNiKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgYW5pbWF0aW9uLnN0YXJ0KGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgbWVbcHJvcGVydHldID0gdmFsO1xuICAgICAgICAgICAgbWUucmVxdWVzdFJlZHJhdyA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uO1xuICAgIH07XG4gICAgdGhpcy5hbmltYXRlVmVjdG9yID0gZnVuY3Rpb24ocHJvcGVydHksIHJlc3VsdCwgdGltZSwgZWFzaW5nLCBjYikge1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICB2YXIgYW5pbVggPSBuZXcgQW5pbWF0aW9uKHRoaXMsIHRoaXNbcHJvcGVydHldLngsIHJlc3VsdC54LCB0aW1lLCBlYXNpbmcsIGNiKTtcbiAgICAgICAgdmFyIGFuaW1ZID0gbmV3IEFuaW1hdGlvbih0aGlzLCB0aGlzW3Byb3BlcnR5XS55LCByZXN1bHQueSwgdGltZSwgZWFzaW5nLCBjYik7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKGFuaW1YKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2goYW5pbVkpO1xuICAgICAgICBhbmltWC5zdGFydChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIG1lW3Byb3BlcnR5XS54ID0gdmFsO1xuICAgICAgICAgICAgbWUucmVxdWVzdFJlZHJhdyA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBhbmltWS5zdGFydChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIG1lW3Byb3BlcnR5XS55ID0gdmFsO1xuICAgICAgICAgICAgbWUucmVxdWVzdFJlZHJhdyA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5zdG9wQW5pbWF0aW9uID0gZnVuY3Rpb24oYW5pbWF0aW9uKSB7XG4gICAgICAgIGFuaW1hdGlvbi5zdG9wKCk7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuYW5pbWF0aW9ucy5pbmRleE9mKGFuaW1hdGlvbik7XG4gICAgICAgIGlmKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnN0b3BBbmltYXRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuYW5pbWF0aW9ucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zW2ldLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBbXTtcbiAgICB9O1xufTtcblxuRHJhd2FibGUucHJvdG90eXBlLnNldEltYWdlID0gZnVuY3Rpb24oaW1nU3JjLCBjYikge1xuICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XG4gICAgdGhpcy5pbWcuc3JjID0gaW1nU3JjO1xuICAgIGlmKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLnNob3cpIHtcbiAgICAgICAgdGhpcy5pbWcub25sb2FkID0gY2I7XG4gICAgfVxufTtcbkRyYXdhYmxlLnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IFtdO1xuICAgIHZhciB0eHQgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHR4dC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy50ZXh0LnB1c2gobmV3IFBhcmFncmFwaCh0eHRbaV0pKTtcbiAgICB9XG59O1xuXG5EcmF3YWJsZS5wcm90b3R5cGUuaW50ZXJhY3Rpb24gPSBmdW5jdGlvbihtb3VzZVBvcywgc2NhbGUpIHtcbiAgICB2YXIgbW91c2VEaWZmZXJlbmNlID0gbW91c2VQb3Muc3ViVmVjdG9yKHRoaXMucG9zLnJvdGF0ZSh0aGlzLnJvdGF0aW9uKS5tdWwoc2NhbGUpKTtcbiAgICB2YXIgZGlmZmVyZW5jZSA9IDA7XG4gICAgaWYodGhpcy5yYWRpdXMgIT09IDApIHtcbiAgICAgICAgZGlmZmVyZW5jZSA9IHRoaXMucmFkaXVzICogc2NhbGU7XG4gICAgfVxuICAgIGlmKHRoaXMuc2l6ZS5sZW5ndGgoKSAhPT0gMCkge1xuICAgICAgICBkaWZmZXJlbmNlID0gdGhpcy5zaXplLmxlbmd0aCgpICogc2NhbGU7XG4gICAgfVxuICAgIGlmIChtb3VzZURpZmZlcmVuY2UubGVuZ3RoKCkgPD0gZGlmZmVyZW5jZSAmJiB0aGlzLnNob3cpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07IiwidmFyIENhbnZhcyA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQsIGVsZW1lbnRJZCwgb2JqZWN0cykge1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLm1hcmdpbiA9IG5ldyBWZWN0b3IyRCh4LCB5KTtcbiAgICB0aGlzLmN0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCkuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIHRoaXMuY3R4LmNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICB0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyRCh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgIHRoaXMub2Zmc2V0ID0gbmV3IFZlY3RvcjJEKDAsIDApO1xuICAgIHRoaXMuc2NhbGUgPSAxO1xuXG4gICAgdGhpcy5vYmplY3RzID0gb2JqZWN0cztcbiAgICB0aGlzLnNlbGVjdGVkID0gbnVsbDtcblxuICAgIHRoaXMuc3RhcnRQb3MgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG4gICAgdGhpcy5tb3VzZVBvcyA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICB0aGlzLmZvY3VzID0gbnVsbDtcblxuICAgIHRoaXMubW92aW5nQ2FudmFzID0gbnVsbDtcblxuICAgIHRoaXMuZHJhd0NhbGxiYWNrID0gbnVsbDtcblxuICAgIHZhciBtZSA9IHRoaXM7XG4gICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWRyYXcgPSBmYWxzZTtcbiAgICAgICAgbWUuY3R4LnNhdmUoKTtcbiAgICAgICAgbWUuY3R4LnRleHRCYXNlbGluZSA9IFwiaGFuZ2luZ1wiO1xuICAgICAgICB2YXIgYyA9IG1lLmNlbnRlci5hZGRWZWN0b3IobWUub2Zmc2V0KTtcbiAgICAgICAgbWUuY3R4LnNldFRyYW5zZm9ybShtZS5zY2FsZSwgMCwgMCwgbWUuc2NhbGUsIGMueCwgYy55KTtcbiAgICAgICAgZm9yKHZhciBpID0gMCwgbCA9IG1lLm9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZih0eXBlb2YgbWUub2JqZWN0c1tpXS5yZXF1ZXN0UmVkcmF3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgaWYobWUub2JqZWN0c1tpXS5yZXF1ZXN0UmVkcmF3KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVkcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYobWUub2JqZWN0c1tpXS5yZXF1ZXN0UmVkcmF3KSB7XG4gICAgICAgICAgICAgICAgcmVkcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBtZS5vYmplY3RzW2ldLnJlcXVlc3RSZWRyYXcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtZS5jdHgucmVzdG9yZSgpO1xuICAgICAgICBpZihyZWRyYXcpIHtcbiAgICAgICAgICAgIG1lLmRyYXcoKTtcbiAgICAgICAgfVxuICAgIH0sIDEwKTtcbn07XG5cbkNhbnZhcy5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5jdHguY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5jdHguY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLmRyYXcoKTtcbn07XG5cbkNhbnZhcy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcblxuQ2FudmFzLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY2IpIHtcbiAgICBpZih0eXBlb2YgdGhpcy5kcmF3Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5kcmF3Q2FsbGJhY2soKTtcbiAgICB9XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICB0aGlzLmN0eC50ZXh0QmFzZWxpbmUgPSBcImhhbmdpbmdcIjtcbiAgICB2YXIgYyA9IHRoaXMuY2VudGVyLmFkZFZlY3Rvcih0aGlzLm9mZnNldCk7XG4gICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtKHRoaXMuc2NhbGUsIDAsIDAsIHRoaXMuc2NhbGUsIGMueCwgYy55KTtcbiAgICB2YXIgaSwgbDtcbiAgICBmb3IoaSA9IDAsIGwgPSB0aGlzLm9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmKHR5cGVvZiB0aGlzLm9iamVjdHNbaV0ucHJlRHJhdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5vYmplY3RzW2ldLnByZURyYXcodGhpcy5jdHgsIHRoaXMuc2NhbGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcihpID0gMCwgbCA9IHRoaXMub2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5vYmplY3RzW2ldLmRyYXcodGhpcy5jdHgsIHRoaXMuc2NhbGUpO1xuICAgIH1cbiAgICBmb3IoaSA9IDAsIGwgPSB0aGlzLm9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmKHR5cGVvZiB0aGlzLm9iamVjdHNbaV0ucG9zdERyYXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0c1tpXS5wb3N0RHJhdyh0aGlzLmN0eCwgdGhpcy5zY2FsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgIGlmKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYigpO1xuICAgIH1cbn07XG5cbkNhbnZhcy5wcm90b3R5cGUuZmluZE9iamVjdE9uQ2FudmFzID0gZnVuY3Rpb24oY2IpIHtcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICBmb3IodmFyIGkgPSB0aGlzLm9iamVjdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG8gPSB0aGlzLm9iamVjdHNbaV0uaW50ZXJhY3Rpb24odGhpcy5tb3VzZVBvcywgdGhpcy5zY2FsZSk7XG4gICAgICAgIGlmKG8gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjYihvKTtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmKCFmb3VuZCkge1xuICAgICAgICBjYihudWxsKTtcbiAgICB9XG59O1xuXG5DYW52YXMucHJvdG90eXBlLm1vdmVUb0NlbnRlciA9IGZ1bmN0aW9uKGNiKSB7XG4gICAgaWYodGhpcy5tb3ZpbmdDYW52YXMgPT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgdGhpcy5tb3ZpbmdDYW52YXMgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKG1lLm9mZnNldC54ID09PSAwICYmIG1lLm9mZnNldC55ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChtZS5tb3ZpbmdDYW52YXMpO1xuICAgICAgICAgICAgICAgIG1lLm1vdmluZ0NhbnZhcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZCA9IG1lLm9mZnNldDtcbiAgICAgICAgICAgIGQgPSBkLmRpdigzMCk7XG4gICAgICAgICAgICBtZS5vZmZzZXQgPSBtZS5vZmZzZXQuc3ViVmVjdG9yKGQpO1xuICAgICAgICAgICAgaWYoTWF0aC5hYnMobWUub2Zmc2V0LngpIDw9IDEpIHtcbiAgICAgICAgICAgICAgICBtZS5vZmZzZXQueCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihNYXRoLmFicyhtZS5vZmZzZXQueSkgPD0gMSkge1xuICAgICAgICAgICAgICAgIG1lLm9mZnNldC55ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZS5kcmF3KCk7XG4gICAgICAgIH0sIDEwKTtcbiAgICB9XG59O1xuXG5DYW52YXMucHJvdG90eXBlLmludGVyYWN0aW9uU3RhcnQgPSBmdW5jdGlvbihlLCBjYikge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5tb3ZpbmdDYW52YXMpO1xuICAgIHRoaXMubW92aW5nQ2FudmFzID0gbnVsbDtcbiAgICB0aGlzLm1vdXNlUG9zID0gbmV3IFZlY3RvcjJEKGUucGFnZVgsIGUucGFnZVkpO1xuICAgIHRoaXMubW91c2VQb3MgPSB0aGlzLm1vdXNlUG9zLnN1YlZlY3Rvcih0aGlzLm1hcmdpbik7XG4gICAgdGhpcy5tb3VzZVBvcyA9IHRoaXMubW91c2VQb3Muc3ViVmVjdG9yKHRoaXMuY2VudGVyKTtcbiAgICB0aGlzLm1vdXNlUG9zID0gdGhpcy5tb3VzZVBvcy5zdWJWZWN0b3IodGhpcy5vZmZzZXQpO1xuICAgIHZhciBtb3VzZVBvcyA9IHRoaXMubW91c2VQb3M7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgIHRoaXMuZmluZE9iamVjdE9uQ2FudmFzKGZ1bmN0aW9uKGZvdW5kKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZCA9IGZvdW5kO1xuICAgICAgICBpZihzZWxlY3RlZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc2VsZWN0ZWQgPSBcInNlbGZcIjtcbiAgICAgICAgICAgIG1vdXNlUG9zID0gbW91c2VQb3MuYWRkVmVjdG9yKG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYihzZWxlY3RlZCwgbW91c2VQb3MpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5DYW52YXMucHJvdG90eXBlLmludGVyYWN0aW9uTW92ZSA9IGZ1bmN0aW9uKGUsIGNiKSB7XG4gICAgdmFyIG5ld1BvcyA9IG5ldyBWZWN0b3IyRChlLnBhZ2VYLCBlLnBhZ2VZKTtcbiAgICBuZXdQb3MgPSBuZXdQb3Muc3ViVmVjdG9yKHRoaXMubWFyZ2luKTtcbiAgICBuZXdQb3MgPSBuZXdQb3Muc3ViVmVjdG9yKHRoaXMuY2VudGVyKTtcbiAgICB2YXIgZGlmZmVyZW5jZSA9IG5ld1Bvcy5zdWJWZWN0b3IodGhpcy5tb3VzZVBvcyk7XG4gICAgdGhpcy5tb3VzZVBvcyA9IG5ld1BvcztcbiAgICBpZih0aGlzLnNlbGVjdGVkID09PSBcInNlbGZcIikge1xuICAgICAgICB0aGlzLnN0YXJ0UG9zID0gdGhpcy5zdGFydFBvcy5hZGRWZWN0b3IoZGlmZmVyZW5jZSk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5vZmZzZXQuYWRkVmVjdG9yKGRpZmZlcmVuY2UpO1xuICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICB9IGVsc2UgaWYodGhpcy5zZWxlY3RlZCAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnN0YXJ0UG9zID0gdGhpcy5zdGFydFBvcy5hZGRWZWN0b3IoZGlmZmVyZW5jZSk7XG4gICAgICAgIHRoaXMubW91c2VQb3MgPSB0aGlzLm1vdXNlUG9zLnN1YlZlY3Rvcih0aGlzLm9mZnNldCk7XG4gICAgICAgIGNiKHRoaXMuc2VsZWN0ZWQsIHRoaXMubW91c2VQb3MubXVsKDEgLyB0aGlzLnNjYWxlKSwgZGlmZmVyZW5jZS5zdWJWZWN0b3IodGhpcy5vZmZzZXQpKTtcbiAgICB9XG59O1xuXG5DYW52YXMucHJvdG90eXBlLmludGVyYWN0aW9uU3RvcCA9IGZ1bmN0aW9uKGNiKSB7XG4gICAgaWYodGhpcy5zdGFydFBvcy5sZW5ndGgoKSA8PSAxMCkge1xuICAgICAgICBjYih0cnVlLCB0aGlzLnNlbGVjdGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjYihmYWxzZSwgdGhpcy5zZWxlY3RlZCk7XG4gICAgfVxuICAgIHRoaXMuc3RhcnRQb3MgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG4gICAgdGhpcy5zZWxlY3RlZCA9IG51bGw7XG4gICAgdGhpcy5tb3VzZVBvcyA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
