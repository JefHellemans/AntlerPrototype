Math.square=function(t){return t*t},Math.toRadians=function(t){return t*Math.PI/180},Math.toDegrees=function(t){return 180*t/Math.PI};var Vector2D=function(t,i){this.x=t,this.y=i};Vector2D.prototype={length:function(){return Math.sqrt(Math.square(this.x)+Math.square(this.y))},dot:function(t){return this.x*t.x+this.y*t.y},normalize:function(){var t=this.length();this.x/=t,this.y/=t},add:function(t){return new Vector2D(this.x+t,this.y+t)},addVector:function(t){return new Vector2D(this.x+t.x,this.y+t.y)},sub:function(t){return new Vector2D(this.x-t,this.y-t)},subVector:function(t){return new Vector2D(this.x-t.x,this.y-t.y)},mul:function(t){return new Vector2D(this.x*t,this.y*t)},mulVector:function(t){return new Vector2D(this.x*t.x,this.y*t.y)},div:function(t){return new Vector2D(this.x/t,this.y/t)},divVector:function(t){return new Vector2D(this.x/t.x,this.y/t.y)},rotate:function(t){var i=Math.toRadians(t),e=Math.cos(i),s=Math.sin(i);return new Vector2D(this.x*e-this.y*s,this.x*s+this.y*e)}};var Animation=function(t,i,e,s,h,r){this.element=t,this.from=i,this.difference=e-i,this.easing=h,this.cb=r,this.pos=0,this.end=s/10,this.timer=null};Animation.prototype.start=function(t){var i=this;this.timer=setInterval(function(){i.pos++;var e=0;switch(i.easing){case"linear":e=i.linear(i.difference,i.pos,i.end,i.from);break;case"easeIn":e=i.easeIn(i.difference,i.pos,i.end,i.from);break;case"easeOut":e=i.easeOut(i.difference,i.pos,i.end,i.from);break;case"easeInOut":e=i.easeInOut(i.difference,i.pos,i.end,i.from)}t(e),i.pos>=i.end&&(clearInterval(i.timer),i.timer=null,i.pos=0,"function"==typeof i.cb&&i.cb(!0,i.element))},10)},Animation.prototype.stop=function(){clearInterval(this.timer),this.timer=null,"function"==typeof this.cb&&this.cb(!1,this.element)},Animation.prototype.linear=function(t,i,e,s){return t*i/e+s},Animation.prototype.easeIn=function(t,i,e,s){return i/=e,t*i*i+s},Animation.prototype.easeOut=function(t,i,e,s){return i/=e,-t*i*(i-2)+s},Animation.prototype.easeInOut=function(t,i,e,s){return i/=e/2,1>i?t/2*i*i+s:(i--,-t/2*(i*(i-2)-1)+s)};var Paragraph=function(t){this.parts=[],this.checkForStyle(t,"[i]","[/i]","italic")||this.checkForStyle(t,"[b]","[/b]","bold")||this.checkForStyle(t,"[size=","[/size]","size")||this.checkForStyle(t,"[font=","[/font]","font")||this.checkForStyle(t,"[align=","[/align]","align")||this.checkForStyle(t,"[color=","[/color]","color")||(this.parts=[t])};Paragraph.prototype.getFont=function(t,i,e,s){return"undefined"!=typeof this.italic&&(t=this.italic),"undefined"!=typeof this.bold&&(i=this.bold),"undefined"!=typeof this.size&&(e=this.size),"undefined"!=typeof this.font&&(s=this.font),[t,i,e,s]},Paragraph.prototype.fontToText=function(t,i,e,s){var h="";return t&&(h+="italic "),i&&(h+="bold "),h+=e+"pt "+s},Paragraph.prototype.draw=function(t,i,e,s,h,r,o,n,a,c,l){var u=this.getFont(e,s,h,r),f=c.x;if("undefined"!=typeof this.align&&(o=this.align),"undefined"!=typeof this.color&&(n=this.color),1!==this.parts.length||this.parts[0]instanceof Paragraph){for(var d=0,g=this.parts.length;g>d;d++)if("function"==typeof this.parts[d].draw&&this.parts[d].draw(t,i,u[0],u[1],u[2],u[3],o,n,a,c,l),1===this.parts[d].length&&"function"==typeof this.parts[d].measure){var p=this.parts[d].measure(t,i,u[0],u[1],u[2],u[3],a);c.x+=p.x}c.x=f}else a||(u[2]*=1/i),"center"===o&&(c=c.addVector(new Vector2D(l,0).mul(.5))),"right"===o&&(c=c.addVector(new Vector2D(l,0))),t.font=this.fontToText(u[0],u[1],u[2],u[3]),t.textAlign=o,t.fillStyle=n,t.fillText(this.parts[0],c.x,c.y)},Paragraph.prototype.measure=function(t,i,e,s,h,r,o){var n=new Vector2D(0,0),a=this.getFont(e,s,h,r);if(1===this.parts.length)o||(a[2]*=1/i),t.font=this.fontToText(a[0],a[1],a[2],a[3]),n.y=a[2],n.x=t.measureText(this.parts[0]).width;else for(var c=0,l=this.parts.length;l>c;c++)if("function"==typeof this.parts[c].measure){var u=this.parts[c].measure(t,i,a[0],a[1],a[2],a[3],o);u.y>n.y&&(n.y=u.y),n.x+=u.x}return n},Paragraph.prototype.checkForStyle=function(t,i,e,s){var h=t.split(i);if(h.length>=2){var r=h.shift();r.length>0&&!(r instanceof Paragraph)?this.parts.push(new Paragraph(r)):r instanceof Paragraph&&this.parts.push(r);for(var o=0,n=h.length;n>o;o++){var a=h[o].split(e);if(i.indexOf("=")>-1){a[0]=a[0].split("]");for(var c=a[0].shift(),l="",u=0,f=a[0].length;f>u;u++)l+=a[0][u],f-1>u&&(l+="]");a[0]=l}var d=new Paragraph(a[0]);switch(0!==a[1].length||a[1]instanceof Paragraph?a[1]instanceof Paragraph?(this.parts.push(d),this.parts.push(a[1])):(this.parts.push(d),this.parts.push(new Paragraph(a[1]))):this.parts.push(d),s){case"italic":d.italic=!0;break;case"bold":d.bold=!0;break;case"size":d.size=c;break;case"font":d.font=c;break;case"align":d.align=c;break;case"color":d.color=c}}return!0}return!1};var Drawable=function(){this.color="#000000",this.img=null,this.imgFill=!0,this.borderColor="#000000",this.borderWidth=0,this.borderScaling=!0,this.text=[],this.textItalic=!1,this.textBold=!1,this.textSize=0,this.textMinSize=6,this.textFont="Arial",this.textAlign="left",this.textColor="#000000",this.textPos=new Vector2D(0,0),this.textAnchor=new Vector2D(0,0),this.textBackground=null,this.textReplace=20,this.textReplaceColor=null,this.textSpacing=1.2,this.textPadding=new Vector2D(0,0),this.textScaling=!0,this.pos=new Vector2D(0,0),this.radius=0,this.size=new Vector2D(0,0),this.show=!0,this.requestRedraw=!1,this.animations=[],this.drawRectangle=function(t){t.fillStyle=this.color;var i=new Vector2D(0,0).subVector(this.size.div(2));t.fillRect(i.x,i.y,this.size.x,this.size.y)},this.drawImage=function(t){if(null!==this.img){var i=0;i=this.imgFill?this.img.width>this.img.height?this.img.height:this.img.width:this.img.width>this.img.height?this.img.width:this.img.height;var e=new Vector2D(this.img.width,this.img.height).div(i).mulVector(this.size).subVector(this.size).mul(-.5),s=new Vector2D(0,0).subVector(this.size.div(2));t.drawImage(this.img,e.x,e.y,this.size.x,this.size.y,s.x,s.y,this.size.x,this.size.y)}else console.log("[DRAWABLE][drawImage]: Could not draw image for",this,"since this.img is null")},this.drawBorder=function(t,i){t.strokeStyle=this.borderColor;var e=this.borderWidth;this.borderScaling||(e*=1/i),t.lineWidth=e;var s=new Vector2D(0,0).subVector(this.size.div(2));t.strokeRect(s.x,s.y,this.size.x,this.size.y)},this.drawCircle=function(t){t.fillStyle=this.color,t.beginPath(),t.arc(0,0,this.radius,0,2*Math.PI,!1),t.closePath(),t.fill()},this.drawImageInCircle=function(t){if(null!==this.img){t.save(),t.beginPath(),t.arc(0,0,this.radius,0,2*Math.PI,!0),t.clip();var i=1,e=new Vector2D(0,0).sub(this.radius),s=new Vector2D(this.radius,this.radius).mul(2),h=new Vector2D(0,0);if(this.imgFill)i=this.img.width>this.img.height?this.img.height:this.img.width,h=new Vector2D(this.img.width,this.img.height).div(i).sub(1).mul(i).div(2);else{i=this.img.width>this.img.height?this.img.width:this.img.height;var r=new Vector2D(this.img.width,this.img.height).div(i).sub(1).mul(-1);0!==r.x&&(r.x=1),0!==r.y&&(r.y=1),s=new Vector2D(this.img.width,this.img.height).div(i).mulVector(s),e=e.subVector(r.mulVector(s).div(2)),e=e.addVector(r.mul(this.radius))}t.drawImage(this.img,h.x,h.y,this.img.width-2*h.x,this.img.height-2*h.y,e.x,e.y,s.x,s.y),t.closePath(),t.restore()}else console.log("[DRAWABLE][drawImageInCircle]: Could not draw image for",this,"since this.img is null")},this.drawBorderForCircle=function(t,i){t.beginPath(),t.strokeStyle=this.borderColor;var e=this.borderWidth;this.borderScaling||(e*=1/i),t.lineWidth=e,t.arc(0,0,this.radius,0,2*Math.PI,!0),t.stroke(),t.closePath()},this.drawText=function(t,i){if(null!==this.text){var e=this.textSize;if(this.textScaling&&(e*=i),e>=this.textMinSize){var s=0,h=0,r=0,o=0,n=new Vector2D(0,0);for(o=this.text.length;o>r;r++){var a=this.text[r].measure(t,i,this.textItalic,this.textBold,this.textSize,this.textFont,this.textScaling);if(a.x>s&&(s=a.x),h+=a.y,o-r>1){var c=this.textSpacing*this.textSize;this.textScaling||(c*=1/i),h+=c}}if(null!==this.textBackground){t.fillStyle=this.textBackground;var l=this.textPadding;this.textScaling||(l=l.mul(1/i));var u=l.mul(2).addVector(new Vector2D(s,h)),f=this.textPos;0!==this.radius&&(f=f.mul(this.radius)),0!==this.size.length()&&(f=f.mulVector(this.size));var d=f.subVector(u.mulVector(this.textAnchor));t.fillRect(d.x,d.y,u.x,u.y),n=d.addVector(l)}for(r=0,o=this.text.length;o>r;r++){t.fillStyle=this.textColor;var g=this.text[r].measure(t,i,this.textItalic,this.textBold,this.textSize,this.textFont,this.textScaling).y,p=this.textSpacing*this.textSize;this.textScaling||(p*=1/i),g+=p,this.text[r].draw(t,i,this.textItalic,this.textBold,this.textSize,this.textFont,this.textAlign,this.textColor,this.textScaling,n,s),n=n.addVector(new Vector2D(0,g))}}else if(null!==this.textReplaceColor){t.fillStyle=this.textReplaceColor;var x;this.textReplace instanceof Vector2D?(x=this.textPos.mulVector(this.size).subVector(this.textReplace.mulVector(this.textAnchor)),t.fillRect(x.x,x.y,this.textReplace.x,this.textReplace.y)):this.textReplace>0&&(x=this.textPos.mul(this.radius).subVector(this.textAnchor.sub(.5).mul(this.textReplace)),t.beginPath(),t.arc(x.x,x.y,this.textReplace,0,2*Math.PI,!1),t.closePath(),t.fill())}}else console.log("[DRAWABLE][drawText]: Could not draw text for",this,"since this.text is null")},this.animate=function(t,i,e,s,h){var r=new Animation(this,this[t],i,e,s,h);this.animations.push(r);var o=this;return r.start(function(i){o[t]=i,o.requestRedraw=!0}),r},this.animateVector=function(t,i,e,s,h){var r=this,o=new Animation(this,this[t].x,i.x,e,s,h),n=new Animation(this,this[t].y,i.y,e,s,h);this.animations.push(o),this.animations.push(n),o.start(function(i){r[t].x=i,r.requestRedraw=!0}),n.start(function(i){r[t].y=i,r.requestRedraw=!0})},this.stopAnimation=function(t){t.stop();var i=this.animations.indexOf(t);i>-1&&this.animations.splice(i,1)},this.stopAnimating=function(){for(var t=this.animations.length-1;t>=0;t--)this.animations[t].stop();this.animations=[]}};Drawable.prototype.setImage=function(t,i){this.img=new Image,this.img.src=t,"function"==typeof i&&this.show&&(this.img.onload=i)},Drawable.prototype.setText=function(t){this.text=[];for(var i=t.split("\n"),e=0,s=i.length;s>e;e++)this.text.push(new Paragraph(i[e]))},Drawable.prototype.interaction=function(t,i){var e=t.subVector(this.pos.mul(i)),s=0;return 0!==this.radius&&(s=this.radius*i),0!==this.size.length()&&(s=this.size.length()*i),e.length()<=s&&this.show?this:!1};var Canvas=function(t,i,e,s,h,r){this.width=e,this.height=s,this.margin=new Vector2D(t,i),this.ctx=document.getElementById(h).getContext("2d"),this.ctx.canvas.width=e,this.ctx.canvas.height=s,this.center=new Vector2D(e/2,s/2),this.offset=new Vector2D(0,0),this.scale=1,this.objects=r,this.selected=null,this.startPos=new Vector2D(0,0),this.mousePos=new Vector2D(0,0),this.focus=null,this.movingCanvas=null,this.drawCallback=null,this.partialCallback=null;var o=this;setInterval(function(){var t=!1;o.ctx.save(),o.ctx.textBaseline="hanging";var i=o.center.addVector(o.offset);o.ctx.setTransform(o.scale,0,0,o.scale,i.x,i.y);for(var e=0,s=o.objects.length;s>e;e++)"function"==typeof o.objects[e].requestRedraw?o.objects[e].requestRedraw()?t=!0:"function"==typeof o.objects[e].requestPartial&&o.objects[e].requestPartial()&&(o.objects[e].partial(o.ctx,o.scale),o.partialCallback()):o.objects[e].requestRedraw&&(t=!0,o.objects[e].requestRedraw=!1);o.ctx.restore(),t&&o.draw()},10)};Canvas.prototype.clear=function(){this.ctx.clearRect(0,0,this.width,this.height)},Canvas.prototype.draw=function(t){this.clear(),this.ctx.save(),this.ctx.textBaseline="hanging";var i=this.center.addVector(this.offset);this.ctx.setTransform(this.scale,0,0,this.scale,i.x,i.y);var e,s;for(e=0,s=this.objects.length;s>e;e++)"function"==typeof this.objects[e].preDraw&&this.objects[e].preDraw(this.ctx,this.scale);for(e=0,s=this.objects.length;s>e;e++)this.objects[e].draw(this.ctx,this.scale);for(e=0,s=this.objects.length;s>e;e++)"function"==typeof this.objects[e].postDraw&&this.objects[e].postDraw(this.ctx,this.scale);this.ctx.restore(),"function"==typeof t&&t(),"function"==typeof this.drawCallback&&this.drawCallback()},Canvas.prototype.findObjectOnCanvas=function(t){for(var i=!1,e=this.objects.length-1;e>=0;e--){var s=this.objects[e].interaction(this.mousePos,this.scale);if(s!==!1){t(s),i=!0;break}}i||t(null)},Canvas.prototype.moveToCenter=function(t){if(null===this.movingCanvas){var i=this;this.movingCanvas=setInterval(function(){0===i.offset.x&&0===i.offset.y&&(clearInterval(i.movingCanvas),i.movingCanvas=null);var e=i.offset;e=e.div(30),i.offset=i.offset.subVector(e),Math.abs(i.offset.x)<=1&&(i.offset.x=0),Math.abs(i.offset.y)<=1&&(i.offset.y=0),"function"==typeof t&&t(),i.draw()},10)}},Canvas.prototype.interactionStart=function(t,i){clearInterval(this.movingCanvas),this.movingCanvas=null,this.mousePos=new Vector2D(t.pageX,t.pageY),this.mousePos=this.mousePos.subVector(this.margin),this.mousePos=this.mousePos.subVector(this.center),this.mousePos=this.mousePos.subVector(this.offset);var e=this.mousePos,s=this.offset;this.findObjectOnCanvas(function(t){var h=t;null===h&&(h="self",e=e.addVector(s)),"function"==typeof i&&i(h,e)})},Canvas.prototype.interactionMove=function(t,i){var e=new Vector2D(t.pageX,t.pageY);e=e.subVector(this.margin),e=e.subVector(this.center);var s=e.subVector(this.mousePos);this.mousePos=e,"self"===this.selected?(this.startPos=this.startPos.addVector(s),this.offset=this.offset.addVector(s),this.draw()):null!==this.selected&&(this.startPos=this.startPos.addVector(s),this.mousePos=this.mousePos.subVector(this.offset),i(this.selected,this.mousePos.mul(1/this.scale)))},Canvas.prototype.interactionStop=function(t){t(this.startPos.length()<=10?this.selected:null),this.startPos=new Vector2D(0,0),this.selected=null,this.mousePos=new Vector2D(0,0)};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGguanMiLCJhbmltYXRpb24uanMiLCJwYXJhZ3JhcGguanMiLCJkcmF3YWJsZS5qcyIsImNhbnZhcy5qcyJdLCJuYW1lcyI6WyJNYXRoIiwic3F1YXJlIiwieCIsInRvUmFkaWFucyIsIlBJIiwidG9EZWdyZWVzIiwiVmVjdG9yMkQiLCJ5IiwidGhpcyIsInByb3RvdHlwZSIsImxlbmd0aCIsInNxcnQiLCJkb3QiLCJ2MiIsIm5vcm1hbGl6ZSIsImwiLCJhZGQiLCJ6IiwiYWRkVmVjdG9yIiwic3ViIiwic3ViVmVjdG9yIiwibXVsIiwibXVsVmVjdG9yIiwiZGl2IiwiZGl2VmVjdG9yIiwicm90YXRlIiwiYW5nbGUiLCJyIiwiY29zIiwic2luIiwiQW5pbWF0aW9uIiwiZWxlbWVudCIsImZyb20iLCJnb2FsIiwidGltZSIsImVhc2luZyIsImNiIiwiZGlmZmVyZW5jZSIsInBvcyIsImVuZCIsInRpbWVyIiwic3RhcnQiLCJtZSIsInNldEludGVydmFsIiwidmFsIiwibGluZWFyIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCIsImNsZWFySW50ZXJ2YWwiLCJzdG9wIiwiYyIsInQiLCJkIiwiYiIsIlBhcmFncmFwaCIsInRleHQiLCJwYXJ0cyIsImNoZWNrRm9yU3R5bGUiLCJnZXRGb250IiwiaXRhbGljIiwiYm9sZCIsInNpemUiLCJmb250IiwiZm9udFRvVGV4dCIsImRyYXciLCJjdHgiLCJzY2FsZSIsImFsaWduIiwiY29sb3IiLCJzY2FsaW5nIiwid2lkdGgiLCJmIiwiaSIsIm1lYXN1cmUiLCJzIiwidGV4dEFsaWduIiwiZmlsbFN0eWxlIiwiZmlsbFRleHQiLCJtZWFzdXJlVGV4dCIsInBhcnRTaXplIiwib3BlbmluZyIsImNsb3NpbmciLCJzdHlsZSIsInRlbXAiLCJzcGxpdCIsInNoaWZ0IiwicHVzaCIsInAiLCJpbmRleE9mIiwidiIsImoiLCJtIiwic3R5bGVkIiwiRHJhd2FibGUiLCJpbWciLCJpbWdGaWxsIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsImJvcmRlclNjYWxpbmciLCJ0ZXh0SXRhbGljIiwidGV4dEJvbGQiLCJ0ZXh0U2l6ZSIsInRleHRNaW5TaXplIiwidGV4dEZvbnQiLCJ0ZXh0Q29sb3IiLCJ0ZXh0UG9zIiwidGV4dEFuY2hvciIsInRleHRCYWNrZ3JvdW5kIiwidGV4dFJlcGxhY2UiLCJ0ZXh0UmVwbGFjZUNvbG9yIiwidGV4dFNwYWNpbmciLCJ0ZXh0UGFkZGluZyIsInRleHRTY2FsaW5nIiwicmFkaXVzIiwic2hvdyIsInJlcXVlc3RSZWRyYXciLCJhbmltYXRpb25zIiwiZHJhd1JlY3RhbmdsZSIsImZpbGxSZWN0IiwiZHJhd0ltYWdlIiwiaGVpZ2h0IiwiY2xpcCIsImNvbnNvbGUiLCJsb2ciLCJkcmF3Qm9yZGVyIiwic3Ryb2tlU3R5bGUiLCJicmR3IiwibGluZVdpZHRoIiwic3Ryb2tlUmVjdCIsImRyYXdDaXJjbGUiLCJiZWdpblBhdGgiLCJhcmMiLCJjbG9zZVBhdGgiLCJmaWxsIiwiZHJhd0ltYWdlSW5DaXJjbGUiLCJzYXZlIiwicmF0aW8iLCJyZXN0b3JlIiwiZHJhd0JvcmRlckZvckNpcmNsZSIsInN0cm9rZSIsImRyYXdUZXh0IiwidyIsImgiLCJwYXJhZ3JhcGhQb3MiLCJwYXJhZ3JhcGhTaXplIiwic3BhY2luZyIsInBhZGRpbmciLCJibG9ja1NpemUiLCJ0eHRQb3MiLCJibG9ja1BvcyIsInNwYWNlIiwicmVwbGFjZVBvcyIsImFuaW1hdGUiLCJwcm9wZXJ0eSIsInJlc3VsdCIsImFuaW1hdGlvbiIsImFuaW1hdGVWZWN0b3IiLCJhbmltWCIsImFuaW1ZIiwic3RvcEFuaW1hdGlvbiIsImluZGV4Iiwic3BsaWNlIiwic3RvcEFuaW1hdGluZyIsInNldEltYWdlIiwiaW1nU3JjIiwiSW1hZ2UiLCJzcmMiLCJvbmxvYWQiLCJzZXRUZXh0IiwidHh0IiwiaW50ZXJhY3Rpb24iLCJtb3VzZVBvcyIsIm1vdXNlRGlmZmVyZW5jZSIsIkNhbnZhcyIsImVsZW1lbnRJZCIsIm9iamVjdHMiLCJtYXJnaW4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsImNhbnZhcyIsImNlbnRlciIsIm9mZnNldCIsInNlbGVjdGVkIiwic3RhcnRQb3MiLCJmb2N1cyIsIm1vdmluZ0NhbnZhcyIsImRyYXdDYWxsYmFjayIsInBhcnRpYWxDYWxsYmFjayIsInJlZHJhdyIsInRleHRCYXNlbGluZSIsInNldFRyYW5zZm9ybSIsInJlcXVlc3RQYXJ0aWFsIiwicGFydGlhbCIsImNsZWFyIiwiY2xlYXJSZWN0IiwicHJlRHJhdyIsInBvc3REcmF3IiwiZmluZE9iamVjdE9uQ2FudmFzIiwiZm91bmQiLCJvIiwibW92ZVRvQ2VudGVyIiwiYWJzIiwiaW50ZXJhY3Rpb25TdGFydCIsImUiLCJwYWdlWCIsInBhZ2VZIiwiaW50ZXJhY3Rpb25Nb3ZlIiwibmV3UG9zIiwiaW50ZXJhY3Rpb25TdG9wIl0sIm1hcHBpbmdzIjoiQUFBQUEsS0FBQUMsT0FBQSxTQUFBQyxHQUNBLE1BQUFBLEdBQUFBLEdBR0FGLEtBQUFHLFVBQUEsU0FBQUQsR0FDQSxNQUFBQSxHQUFBRixLQUFBSSxHQUFBLEtBR0FKLEtBQUFLLFVBQUEsU0FBQUgsR0FDQSxNQUFBLEtBQUFBLEVBQUFGLEtBQUFJLEdBR0EsSUFBQUUsVUFBQSxTQUFBSixFQUFBSyxHQUNBQyxLQUFBTixFQUFBQSxFQUNBTSxLQUFBRCxFQUFBQSxFQUdBRCxVQUFBRyxXQUNBQyxPQUFBLFdBQ0EsTUFBQVYsTUFBQVcsS0FBQVgsS0FBQUMsT0FBQU8sS0FBQU4sR0FBQUYsS0FBQUMsT0FBQU8sS0FBQUQsS0FFQUssSUFBQSxTQUFBQyxHQUNBLE1BQUFMLE1BQUFOLEVBQUFXLEVBQUFYLEVBQUFNLEtBQUFELEVBQUFNLEVBQUFOLEdBRUFPLFVBQUEsV0FDQSxHQUFBQyxHQUFBUCxLQUFBRSxRQUNBRixNQUFBTixHQUFBYSxFQUNBUCxLQUFBRCxHQUFBUSxHQUVBQyxJQUFBLFNBQUFDLEdBQ0EsTUFBQSxJQUFBWCxVQUFBRSxLQUFBTixFQUFBZSxF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QUNBRSxLQUFBZ0wsU0FBQSxLQUNBaEwsS0FBQW9LLFNBQUEsR0FBQXRLLFVBQUEsRUFBQSIsImZpbGUiOiJjYW52YXMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiTWF0aC5zcXVhcmUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB4O1xufTtcblxuTWF0aC50b1JhZGlhbnMgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuICh4ICogTWF0aC5QSSkgLyAxODA7XG59O1xuXG5NYXRoLnRvRGVncmVlcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gKHggKiAxODApIC8gTWF0aC5QSTtcbn07XG5cbnZhciBWZWN0b3IyRCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG59O1xuXG5WZWN0b3IyRC5wcm90b3R5cGUgPSB7XG4gICAgbGVuZ3RoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnNxdWFyZSh0aGlzLngpICsgTWF0aC5zcXVhcmUodGhpcy55KSk7XG4gICAgfSxcbiAgICBkb3Q6IGZ1bmN0aW9uKHYyKSB7XG4gICAgICAgIHJldHVybiAodGhpcy54ICogdjIueCkgKyAodGhpcy55ICogdjIueSk7XG4gICAgfSxcbiAgICBub3JtYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbCA9IHRoaXMubGVuZ3RoKCk7XG4gICAgICAgIHRoaXMueCAvPSBsO1xuICAgICAgICB0aGlzLnkgLz0gbDtcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24oeikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHRoaXMueCArIHosIHRoaXMueSArIHopO1xuICAgIH0sXG4gICAgYWRkVmVjdG9yOiBmdW5jdGlvbih2Mikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHRoaXMueCArIHYyLngsIHRoaXMueSArIHYyLnkpO1xuICAgIH0sXG4gICAgc3ViOiBmdW5jdGlvbih6KSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMkQodGhpcy54IC0geiwgdGhpcy55IC0geik7XG4gICAgfSxcbiAgICBzdWJWZWN0b3I6IGZ1bmN0aW9uKHYyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMkQodGhpcy54IC0gdjIueCwgdGhpcy55IC0gdjIueSk7XG4gICAgfSxcbiAgICBtdWw6IGZ1bmN0aW9uKHopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh0aGlzLnggKiB6LCB0aGlzLnkgKiB6KTtcbiAgICB9LFxuICAgIG11bFZlY3RvcjogZnVuY3Rpb24odjIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh0aGlzLnggKiB2Mi54LCB0aGlzLnkgKiB2Mi55KTtcbiAgICB9LFxuICAgIGRpdjogZnVuY3Rpb24oeikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHRoaXMueCAvIHosIHRoaXMueSAvIHopO1xuICAgIH0sXG4gICAgZGl2VmVjdG9yOiBmdW5jdGlvbih2Mikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHRoaXMueCAvIHYyLngsIHRoaXMueSAvIHYyLnkpO1xuICAgIH0sXG4gICAgcm90YXRlOiBmdW5jdGlvbihhbmdsZSkge1xuICAgICAgICB2YXIgciA9IE1hdGgudG9SYWRpYW5zKGFuZ2xlKTtcbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKHIpO1xuICAgICAgICB2YXIgc2luID0gTWF0aC5zaW4ocik7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMkQoKHRoaXMueCAqIGNvcykgLSAodGhpcy55ICogc2luKSwgKHRoaXMueCAqIHNpbikgKyAodGhpcy55ICogY29zKSk7XG4gICAgfVxufTsiLCJ2YXIgQW5pbWF0aW9uID0gZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgZ29hbCwgdGltZSwgZWFzaW5nLCBjYikge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICB0aGlzLmRpZmZlcmVuY2UgPSBnb2FsIC0gZnJvbTtcblxuICAgIHRoaXMuZWFzaW5nID0gZWFzaW5nO1xuICAgIHRoaXMuY2IgPSBjYjtcblxuICAgIHRoaXMucG9zID0gMDtcbiAgICB0aGlzLmVuZCA9IHRpbWUgLyAxMDtcbiAgICB0aGlzLnRpbWVyID0gbnVsbDtcbn07XG5cbkFuaW1hdGlvbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbihjYikge1xuICAgIHZhciBtZSA9IHRoaXM7XG4gICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBtZS5wb3MrKztcbiAgICAgICAgdmFyIHZhbCA9IDA7XG4gICAgICAgIHN3aXRjaChtZS5lYXNpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgXCJsaW5lYXJcIjpcbiAgICAgICAgICAgICAgICB2YWwgPSBtZS5saW5lYXIobWUuZGlmZmVyZW5jZSwgbWUucG9zLCBtZS5lbmQsIG1lLmZyb20pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVhc2VJblwiOlxuICAgICAgICAgICAgICAgIHZhbCA9IG1lLmVhc2VJbihtZS5kaWZmZXJlbmNlLCBtZS5wb3MsIG1lLmVuZCwgbWUuZnJvbSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZWFzZU91dFwiOlxuICAgICAgICAgICAgICAgIHZhbCA9IG1lLmVhc2VPdXQobWUuZGlmZmVyZW5jZSwgbWUucG9zLCBtZS5lbmQsIG1lLmZyb20pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVhc2VJbk91dFwiOlxuICAgICAgICAgICAgICAgIHZhbCA9IG1lLmVhc2VJbk91dChtZS5kaWZmZXJlbmNlLCBtZS5wb3MsIG1lLmVuZCwgbWUuZnJvbSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2IodmFsKTtcbiAgICAgICAgaWYobWUucG9zID49IG1lLmVuZCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChtZS50aW1lcik7XG4gICAgICAgICAgICBtZS50aW1lciA9IG51bGw7XG4gICAgICAgICAgICBtZS5wb3MgPSAwO1xuICAgICAgICAgICAgaWYodHlwZW9mIG1lLmNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgbWUuY2IodHJ1ZSwgbWUuZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCAxMCk7XG59O1xuXG5BbmltYXRpb24ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgIGlmKHR5cGVvZiB0aGlzLmNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuY2IoZmFsc2UsIHRoaXMuZWxlbWVudCk7XG4gICAgfVxufTtcblxuQW5pbWF0aW9uLnByb3RvdHlwZS5saW5lYXIgPSBmdW5jdGlvbihjLCB0LCBkLCBiKSB7XG4gICAgcmV0dXJuIChjICogdCAvIGQgKyBiKTtcbn07XG5cbkFuaW1hdGlvbi5wcm90b3R5cGUuZWFzZUluID0gZnVuY3Rpb24oYywgdCwgZCwgYikge1xuICAgIHQgLz0gZDtcbiAgICByZXR1cm4gKGMgKiB0ICogdCArIGIpO1xufTtcblxuQW5pbWF0aW9uLnByb3RvdHlwZS5lYXNlT3V0ID0gZnVuY3Rpb24oYywgdCwgZCwgYikge1xuICAgIHQgLz0gZDtcbiAgICByZXR1cm4gKC1jICogdCAqICh0LTIpICsgYik7XG59O1xuXG5BbmltYXRpb24ucHJvdG90eXBlLmVhc2VJbk91dCA9IGZ1bmN0aW9uKGMsIHQsIGQsIGIpIHtcbiAgICB0IC89IGQgLyAyO1xuICAgIGlmICh0IDwgMSkge1xuICAgICAgICByZXR1cm4gKGMvMip0KnQgKyBiKTtcbiAgICB9XG4gICAgdC0tO1xuICAgIHJldHVybiAoLWMgLyAyICogKHQgKiAodCAtIDIpIC0gMSkgKyBiKTtcbn07IiwidmFyIFBhcmFncmFwaCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0aGlzLnBhcnRzID0gW107XG5cbiAgICBpZighdGhpcy5jaGVja0ZvclN0eWxlKHRleHQsIFwiW2ldXCIsIFwiWy9pXVwiLCBcIml0YWxpY1wiKSkge1xuICAgICAgICBpZighdGhpcy5jaGVja0ZvclN0eWxlKHRleHQsIFwiW2JdXCIsIFwiWy9iXVwiLCBcImJvbGRcIikpIHtcbiAgICAgICAgICAgIGlmKCF0aGlzLmNoZWNrRm9yU3R5bGUodGV4dCwgXCJbc2l6ZT1cIiwgXCJbL3NpemVdXCIsIFwic2l6ZVwiKSkge1xuICAgICAgICAgICAgICAgIGlmKCF0aGlzLmNoZWNrRm9yU3R5bGUodGV4dCwgXCJbZm9udD1cIiwgXCJbL2ZvbnRdXCIsIFwiZm9udFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5jaGVja0ZvclN0eWxlKHRleHQsIFwiW2FsaWduPVwiLCBcIlsvYWxpZ25dXCIsIFwiYWxpZ25cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLmNoZWNrRm9yU3R5bGUodGV4dCwgXCJbY29sb3I9XCIsIFwiWy9jb2xvcl1cIiwgXCJjb2xvclwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHMgPSBbdGV4dF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5QYXJhZ3JhcGgucHJvdG90eXBlLmdldEZvbnQgPSBmdW5jdGlvbihpdGFsaWMsIGJvbGQsIHNpemUsIGZvbnQpIHtcbiAgICBpZih0eXBlb2YgdGhpcy5pdGFsaWMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGl0YWxpYyA9IHRoaXMuaXRhbGljO1xuICAgIH1cbiAgICBpZih0eXBlb2YgdGhpcy5ib2xkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBib2xkID0gdGhpcy5ib2xkO1xuICAgIH1cbiAgICBpZih0eXBlb2YgdGhpcy5zaXplICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzaXplID0gdGhpcy5zaXplO1xuICAgIH1cbiAgICBpZih0eXBlb2YgdGhpcy5mb250ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBmb250ID0gdGhpcy5mb250O1xuICAgIH1cbiAgICByZXR1cm4gW2l0YWxpYywgYm9sZCwgc2l6ZSwgZm9udF07XG59O1xuXG5QYXJhZ3JhcGgucHJvdG90eXBlLmZvbnRUb1RleHQgPSBmdW5jdGlvbihpdGFsaWMsIGJvbGQsIHNpemUsIGZvbnQpIHtcbiAgICB2YXIgdCA9IFwiXCI7XG4gICAgaWYoaXRhbGljKSB7XG4gICAgICAgIHQgKz0gXCJpdGFsaWMgXCI7XG4gICAgfVxuICAgIGlmKGJvbGQpIHtcbiAgICAgICAgdCArPSBcImJvbGQgXCI7XG4gICAgfVxuICAgIHQgKz0gc2l6ZSArIFwicHQgXCIgKyBmb250O1xuICAgIHJldHVybiB0O1xufTtcblxuUGFyYWdyYXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY3R4LCBzY2FsZSwgaXRhbGljLCBib2xkLCBzaXplLCBmb250LCBhbGlnbiwgY29sb3IsIHNjYWxpbmcsIHBvcywgd2lkdGgpIHtcbiAgICB2YXIgZiA9IHRoaXMuZ2V0Rm9udChpdGFsaWMsIGJvbGQsIHNpemUsIGZvbnQpO1xuICAgIHZhciB4ID0gcG9zLng7XG4gICAgaWYodHlwZW9mIHRoaXMuYWxpZ24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFsaWduID0gdGhpcy5hbGlnbjtcbiAgICB9XG4gICAgaWYodHlwZW9mIHRoaXMuY29sb3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbG9yID0gdGhpcy5jb2xvcjtcbiAgICB9XG4gICAgaWYodGhpcy5wYXJ0cy5sZW5ndGggPT09IDEgJiYgISh0aGlzLnBhcnRzWzBdIGluc3RhbmNlb2YgUGFyYWdyYXBoKSkge1xuICAgICAgICBpZighc2NhbGluZykge1xuICAgICAgICAgICAgZlsyXSAqPSAxIC8gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYoYWxpZ24gPT09IFwiY2VudGVyXCIpIHtcbiAgICAgICAgICAgIHBvcyA9IHBvcy5hZGRWZWN0b3IobmV3IFZlY3RvcjJEKHdpZHRoLCAwKS5tdWwoLjUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZihhbGlnbiA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgICAgICBwb3MgPSBwb3MuYWRkVmVjdG9yKG5ldyBWZWN0b3IyRCh3aWR0aCwgMCkpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5mb250ID0gdGhpcy5mb250VG9UZXh0KGZbMF0sIGZbMV0sIGZbMl0sIGZbM10pO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gYWxpZ247XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgY3R4LmZpbGxUZXh0KHRoaXMucGFydHNbMF0sIHBvcy54LCBwb3MueSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYodHlwZW9mIHRoaXMucGFydHNbaV0uZHJhdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMucGFydHNbaV0uZHJhdyhjdHgsIHNjYWxlLCBmWzBdLCBmWzFdLCBmWzJdLCBmWzNdLCBhbGlnbiwgY29sb3IsIHNjYWxpbmcsIHBvcywgd2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodGhpcy5wYXJ0c1tpXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5wYXJ0c1tpXS5tZWFzdXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcy5wYXJ0c1tpXS5tZWFzdXJlKGN0eCwgc2NhbGUsIGZbMF0sIGZbMV0sIGZbMl0sIGZbM10sIHNjYWxpbmcpO1xuICAgICAgICAgICAgICAgICAgICBwb3MueCArPSBzLng7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBvcy54ID0geDtcbiAgICB9XG59O1xuXG5QYXJhZ3JhcGgucHJvdG90eXBlLm1lYXN1cmUgPSBmdW5jdGlvbihjdHgsIHNjYWxlLCBpdGFsaWMsIGJvbGQsIHNpemUsIGZvbnQsIHNjYWxpbmcpIHtcbiAgICB2YXIgcyA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICB2YXIgZiA9IHRoaXMuZ2V0Rm9udChpdGFsaWMsIGJvbGQsIHNpemUsIGZvbnQpO1xuICAgIGlmKHRoaXMucGFydHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmKCFzY2FsaW5nKSB7XG4gICAgICAgICAgICBmWzJdICo9IDEgLyBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZm9udCA9IHRoaXMuZm9udFRvVGV4dChmWzBdLCBmWzFdLCBmWzJdLCBmWzNdKTtcbiAgICAgICAgcy55ID0gZlsyXTtcbiAgICAgICAgcy54ID0gY3R4Lm1lYXN1cmVUZXh0KHRoaXMucGFydHNbMF0pLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5wYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmKHR5cGVvZiB0aGlzLnBhcnRzW2ldLm1lYXN1cmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydFNpemUgPSB0aGlzLnBhcnRzW2ldLm1lYXN1cmUoY3R4LCBzY2FsZSwgZlswXSwgZlsxXSwgZlsyXSwgZlszXSwgc2NhbGluZyk7XG4gICAgICAgICAgICAgICAgaWYocGFydFNpemUueSA+IHMueSkge1xuICAgICAgICAgICAgICAgICAgICBzLnkgPSBwYXJ0U2l6ZS55O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzLnggKz0gcGFydFNpemUueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcztcbn07XG5cblBhcmFncmFwaC5wcm90b3R5cGUuY2hlY2tGb3JTdHlsZSA9IGZ1bmN0aW9uKHRleHQsIG9wZW5pbmcsIGNsb3NpbmcsIHN0eWxlKSB7XG4gICAgdmFyIHRlbXAgPSB0ZXh0LnNwbGl0KG9wZW5pbmcpO1xuICAgIGlmKHRlbXAubGVuZ3RoID49IDIpIHtcbiAgICAgICAgdmFyIHQgPSB0ZW1wLnNoaWZ0KCk7XG4gICAgICAgIGlmKHQubGVuZ3RoID4gMCAmJiAhKHQgaW5zdGFuY2VvZiBQYXJhZ3JhcGgpKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2gobmV3IFBhcmFncmFwaCh0KSk7XG4gICAgICAgIH0gZWxzZSBpZih0IGluc3RhbmNlb2YgUGFyYWdyYXBoKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKHZhciBpID0gMCwgbCA9IHRlbXAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRlbXBbaV0uc3BsaXQoY2xvc2luZyk7XG4gICAgICAgICAgICBpZihvcGVuaW5nLmluZGV4T2YoXCI9XCIpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBwWzBdID0gcFswXS5zcGxpdChcIl1cIik7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSBwWzBdLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGogPSAwLCBtID0gcFswXS5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaXQgKz0gcFswXVtqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYoaiA8IG0gLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdCArPSBcIl1cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwWzBdID0gc3BsaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3R5bGVkID0gbmV3IFBhcmFncmFwaChwWzBdKTtcblxuICAgICAgICAgICAgaWYocFsxXS5sZW5ndGggPT09IDAgJiYgIShwWzFdIGluc3RhbmNlb2YgUGFyYWdyYXBoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaChzdHlsZWQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKHBbMV0gaW5zdGFuY2VvZiBQYXJhZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goc3R5bGVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2gocFsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaChzdHlsZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaChuZXcgUGFyYWdyYXBoKHBbMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaChzdHlsZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJpdGFsaWNcIjpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVkLml0YWxpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJib2xkXCI6XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlZC5ib2xkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNpemVcIjpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVkLnNpemUgPSB2O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZm9udFwiOlxuICAgICAgICAgICAgICAgICAgICBzdHlsZWQuZm9udCA9IHY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhbGlnblwiOlxuICAgICAgICAgICAgICAgICAgICBzdHlsZWQuYWxpZ24gPSB2O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29sb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVkLmNvbG9yID0gdjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07IiwidmFyIERyYXdhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jb2xvciA9IFwiIzAwMDAwMFwiO1xuICAgIHRoaXMuaW1nID0gbnVsbDtcbiAgICB0aGlzLmltZ0ZpbGwgPSB0cnVlO1xuXG4gICAgdGhpcy5ib3JkZXJDb2xvciA9IFwiIzAwMDAwMFwiO1xuICAgIHRoaXMuYm9yZGVyV2lkdGggPSAwO1xuICAgIHRoaXMuYm9yZGVyU2NhbGluZyA9IHRydWU7XG5cbiAgICB0aGlzLnRleHQgPSBbXTtcbiAgICB0aGlzLnRleHRJdGFsaWMgPSBmYWxzZTtcbiAgICB0aGlzLnRleHRCb2xkID0gZmFsc2U7XG4gICAgdGhpcy50ZXh0U2l6ZSA9IDA7XG4gICAgdGhpcy50ZXh0TWluU2l6ZSA9IDY7XG4gICAgdGhpcy50ZXh0Rm9udCA9IFwiQXJpYWxcIjtcbiAgICB0aGlzLnRleHRBbGlnbiA9IFwibGVmdFwiO1xuICAgIHRoaXMudGV4dENvbG9yID0gXCIjMDAwMDAwXCI7XG4gICAgdGhpcy50ZXh0UG9zID0gbmV3IFZlY3RvcjJEKDAsIDApO1xuICAgIHRoaXMudGV4dEFuY2hvciA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICB0aGlzLnRleHRCYWNrZ3JvdW5kID0gbnVsbDtcbiAgICB0aGlzLnRleHRSZXBsYWNlID0gMjA7XG4gICAgdGhpcy50ZXh0UmVwbGFjZUNvbG9yID0gbnVsbDtcbiAgICB0aGlzLnRleHRTcGFjaW5nID0gMS4yO1xuICAgIHRoaXMudGV4dFBhZGRpbmcgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG4gICAgdGhpcy50ZXh0U2NhbGluZyA9IHRydWU7XG5cbiAgICB0aGlzLnBvcyA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICB0aGlzLnJhZGl1cyA9IDA7XG4gICAgdGhpcy5zaXplID0gbmV3IFZlY3RvcjJEKDAsIDApO1xuXG4gICAgdGhpcy5zaG93ID0gdHJ1ZTtcbiAgICB0aGlzLnJlcXVlc3RSZWRyYXcgPSBmYWxzZTtcbiAgICB0aGlzLmFuaW1hdGlvbnMgPSBbXTtcblxuICAgIHRoaXMuZHJhd1JlY3RhbmdsZSA9IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcbiAgICAgICAgdmFyIHAgPSBuZXcgVmVjdG9yMkQoMCwgMCkuc3ViVmVjdG9yKHRoaXMuc2l6ZS5kaXYoMikpO1xuICAgICAgICBjdHguZmlsbFJlY3QocC54LCBwLnksIHRoaXMuc2l6ZS54LCB0aGlzLnNpemUueSk7XG4gICAgfTtcbiAgICB0aGlzLmRyYXdJbWFnZSA9IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICBpZih0aGlzLmltZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGRpdiA9IDA7XG4gICAgICAgICAgICBpZih0aGlzLmltZ0ZpbGwpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmltZy53aWR0aCA+IHRoaXMuaW1nLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGl2ID0gdGhpcy5pbWcud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmltZy53aWR0aCA+IHRoaXMuaW1nLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy53aWR0aDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNsaXAgPSBuZXcgVmVjdG9yMkQodGhpcy5pbWcud2lkdGgsIHRoaXMuaW1nLmhlaWdodCkuZGl2KGRpdikubXVsVmVjdG9yKHRoaXMuc2l6ZSkuc3ViVmVjdG9yKHRoaXMuc2l6ZSkubXVsKC0uNSk7XG4gICAgICAgICAgICB2YXIgcCA9IG5ldyBWZWN0b3IyRCgwLCAwKS5zdWJWZWN0b3IodGhpcy5zaXplLmRpdigyKSk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1nLCBjbGlwLngsIGNsaXAueSwgdGhpcy5zaXplLngsIHRoaXMuc2l6ZS55LCBwLngsIHAueSwgdGhpcy5zaXplLngsIHRoaXMuc2l6ZS55KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RSQVdBQkxFXVtkcmF3SW1hZ2VdOiBDb3VsZCBub3QgZHJhdyBpbWFnZSBmb3JcIiwgdGhpcywgXCJzaW5jZSB0aGlzLmltZyBpcyBudWxsXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmRyYXdCb3JkZXIgPSBmdW5jdGlvbihjdHgsIHNjYWxlKSB7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuYm9yZGVyQ29sb3I7XG4gICAgICAgIHZhciBicmR3ID0gdGhpcy5ib3JkZXJXaWR0aDtcbiAgICAgICAgaWYoIXRoaXMuYm9yZGVyU2NhbGluZykge1xuICAgICAgICAgICAgYnJkdyAqPSAxIC8gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJyZHc7XG4gICAgICAgIHZhciBwID0gbmV3IFZlY3RvcjJEKDAsIDApLnN1YlZlY3Rvcih0aGlzLnNpemUuZGl2KDIpKTtcbiAgICAgICAgY3R4LnN0cm9rZVJlY3QocC54LCBwLnksIHRoaXMuc2l6ZS54LCB0aGlzLnNpemUueSk7XG4gICAgfTtcblxuICAgIHRoaXMuZHJhd0NpcmNsZSA9IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguYXJjKDAsIDAsIHRoaXMucmFkaXVzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgfTtcbiAgICB0aGlzLmRyYXdJbWFnZUluQ2lyY2xlID0gZnVuY3Rpb24oY3R4KSB7XG4gICAgICAgIGlmKHRoaXMuaW1nICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LmFyYygwLCAwLCB0aGlzLnJhZGl1cywgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgICAgICAgICAgY3R4LmNsaXAoKTtcbiAgICAgICAgICAgIHZhciBkaXYgPSAxO1xuICAgICAgICAgICAgdmFyIHAgPSBuZXcgVmVjdG9yMkQoMCwgMCkuc3ViKHRoaXMucmFkaXVzKTtcbiAgICAgICAgICAgIHZhciBzID0gbmV3IFZlY3RvcjJEKHRoaXMucmFkaXVzLCB0aGlzLnJhZGl1cykubXVsKDIpO1xuICAgICAgICAgICAgdmFyIGNsaXAgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG4gICAgICAgICAgICBpZih0aGlzLmltZ0ZpbGwpIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmltZy53aWR0aCA+IHRoaXMuaW1nLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmltZy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGl2ID0gdGhpcy5pbWcud2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsaXAgPSBuZXcgVmVjdG9yMkQodGhpcy5pbWcud2lkdGgsIHRoaXMuaW1nLmhlaWdodCkuZGl2KGRpdikuc3ViKDEpLm11bChkaXYpLmRpdigyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5pbWcud2lkdGggPiB0aGlzLmltZy5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGl2ID0gdGhpcy5pbWcud2lkdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGl2ID0gdGhpcy5pbWcuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmF0aW8gPSBuZXcgVmVjdG9yMkQodGhpcy5pbWcud2lkdGgsIHRoaXMuaW1nLmhlaWdodCkuZGl2KGRpdikuc3ViKDEpLm11bCgtMSk7XG4gICAgICAgICAgICAgICAgaWYocmF0aW8ueCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByYXRpby54ID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYocmF0aW8ueSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByYXRpby55ID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcyA9IG5ldyBWZWN0b3IyRCh0aGlzLmltZy53aWR0aCwgdGhpcy5pbWcuaGVpZ2h0KS5kaXYoZGl2KS5tdWxWZWN0b3Iocyk7XG4gICAgICAgICAgICAgICAgcCA9IHAuc3ViVmVjdG9yKHJhdGlvLm11bFZlY3RvcihzKS5kaXYoMikpO1xuICAgICAgICAgICAgICAgIHAgPSBwLmFkZFZlY3RvcihyYXRpby5tdWwodGhpcy5yYWRpdXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIGNsaXAueCwgY2xpcC55LCB0aGlzLmltZy53aWR0aCAtIChjbGlwLnggKiAyKSwgdGhpcy5pbWcuaGVpZ2h0IC0gKGNsaXAueSAqIDIpLCBwLngsIHAueSwgcy54LCBzLnkpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0RSQVdBQkxFXVtkcmF3SW1hZ2VJbkNpcmNsZV06IENvdWxkIG5vdCBkcmF3IGltYWdlIGZvclwiLCB0aGlzLCBcInNpbmNlIHRoaXMuaW1nIGlzIG51bGxcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZHJhd0JvcmRlckZvckNpcmNsZSA9IGZ1bmN0aW9uKGN0eCwgc2NhbGUpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmJvcmRlckNvbG9yO1xuICAgICAgICB2YXIgYnJkdyA9IHRoaXMuYm9yZGVyV2lkdGg7XG4gICAgICAgIGlmKCF0aGlzLmJvcmRlclNjYWxpbmcpIHtcbiAgICAgICAgICAgIGJyZHcgKj0gMSAvIHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBicmR3O1xuICAgICAgICBjdHguYXJjKDAsIDAsIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH07XG5cbiAgICB0aGlzLmRyYXdUZXh0ID0gZnVuY3Rpb24oY3R4LCBzY2FsZSkge1xuICAgICAgICBpZih0aGlzLnRleHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0U2l6ZSA9IHRoaXMudGV4dFNpemU7XG4gICAgICAgICAgICBpZih0aGlzLnRleHRTY2FsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGV4dFNpemUgKj0gc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0ZXh0U2l6ZSA+PSB0aGlzLnRleHRNaW5TaXplKSB7XG4gICAgICAgICAgICAgICAgdmFyIHcgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBoID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBwYXJhZ3JhcGhQb3MgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG4gICAgICAgICAgICAgICAgZm9yKGwgPSB0aGlzLnRleHQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhZ3JhcGhTaXplID0gdGhpcy50ZXh0W2ldLm1lYXN1cmUoY3R4LCBzY2FsZSwgdGhpcy50ZXh0SXRhbGljLCB0aGlzLnRleHRCb2xkLCB0aGlzLnRleHRTaXplLCB0aGlzLnRleHRGb250LCB0aGlzLnRleHRTY2FsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFncmFwaFNpemUueCA+IHcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHcgPSBwYXJhZ3JhcGhTaXplLng7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaCArPSBwYXJhZ3JhcGhTaXplLnk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsIC0gaSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFjaW5nID0gdGhpcy50ZXh0U3BhY2luZyAqIHRoaXMudGV4dFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGV4dFNjYWxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFjaW5nICo9IDEgLyBzY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGggKz0gc3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0aGlzLnRleHRCYWNrZ3JvdW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnRleHRCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9IHRoaXMudGV4dFBhZGRpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLnRleHRTY2FsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nID0gcGFkZGluZy5tdWwoMSAvIHNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gcGFkZGluZy5tdWwoMikuYWRkVmVjdG9yKG5ldyBWZWN0b3IyRCh3LCBoKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eHRQb3MgPSB0aGlzLnRleHRQb3M7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMucmFkaXVzICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eHRQb3MgPSB0eHRQb3MubXVsKHRoaXMucmFkaXVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnNpemUubGVuZ3RoKCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4dFBvcyA9IHR4dFBvcy5tdWxWZWN0b3IodGhpcy5zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tQb3MgPSB0eHRQb3Muc3ViVmVjdG9yKGJsb2NrU2l6ZS5tdWxWZWN0b3IodGhpcy50ZXh0QW5jaG9yKSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChibG9ja1Bvcy54LCBibG9ja1Bvcy55LCBibG9ja1NpemUueCwgYmxvY2tTaXplLnkpO1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGhQb3MgPSBibG9ja1Bvcy5hZGRWZWN0b3IocGFkZGluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcihpID0gMCwgbCA9IHRoaXMudGV4dC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMudGV4dENvbG9yO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy50ZXh0W2ldLm1lYXN1cmUoY3R4LCBzY2FsZSwgdGhpcy50ZXh0SXRhbGljLCB0aGlzLnRleHRCb2xkLCB0aGlzLnRleHRTaXplLCB0aGlzLnRleHRGb250LCB0aGlzLnRleHRTY2FsaW5nKS55O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhY2UgPSB0aGlzLnRleHRTcGFjaW5nICogdGhpcy50ZXh0U2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRleHRTY2FsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFjZSAqPSAxIC8gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICs9IHNwYWNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRbaV0uZHJhdyhjdHgsIHNjYWxlLCB0aGlzLnRleHRJdGFsaWMsIHRoaXMudGV4dEJvbGQsIHRoaXMudGV4dFNpemUsIHRoaXMudGV4dEZvbnQsIHRoaXMudGV4dEFsaWduLCB0aGlzLnRleHRDb2xvciwgdGhpcy50ZXh0U2NhbGluZywgcGFyYWdyYXBoUG9zLCB3KTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoUG9zID0gcGFyYWdyYXBoUG9zLmFkZFZlY3RvcihuZXcgVmVjdG9yMkQoMCwgaGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLnRleHRSZXBsYWNlQ29sb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMudGV4dFJlcGxhY2VDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VQb3M7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMudGV4dFJlcGxhY2UgaW5zdGFuY2VvZiBWZWN0b3IyRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZVBvcyA9IHRoaXMudGV4dFBvcy5tdWxWZWN0b3IodGhpcy5zaXplKS5zdWJWZWN0b3IodGhpcy50ZXh0UmVwbGFjZS5tdWxWZWN0b3IodGhpcy50ZXh0QW5jaG9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QocmVwbGFjZVBvcy54LCByZXBsYWNlUG9zLnksIHRoaXMudGV4dFJlcGxhY2UueCwgdGhpcy50ZXh0UmVwbGFjZS55KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMudGV4dFJlcGxhY2UgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlUG9zID0gdGhpcy50ZXh0UG9zLm11bCh0aGlzLnJhZGl1cykuc3ViVmVjdG9yKHRoaXMudGV4dEFuY2hvci5zdWIoMC41KS5tdWwodGhpcy50ZXh0UmVwbGFjZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmFyYyhyZXBsYWNlUG9zLngsIHJlcGxhY2VQb3MueSwgdGhpcy50ZXh0UmVwbGFjZSwgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltEUkFXQUJMRV1bZHJhd1RleHRdOiBDb3VsZCBub3QgZHJhdyB0ZXh0IGZvclwiLCB0aGlzLCBcInNpbmNlIHRoaXMudGV4dCBpcyBudWxsXCIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuYW5pbWF0ZSA9IGZ1bmN0aW9uKHByb3BlcnR5LCByZXN1bHQsIHRpbWUsIGVhc2luZywgY2IpIHtcbiAgICAgICAgdmFyIGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24odGhpcywgdGhpc1twcm9wZXJ0eV0sIHJlc3VsdCwgdGltZSwgZWFzaW5nLCBjYik7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIGFuaW1hdGlvbi5zdGFydChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIG1lW3Byb3BlcnR5XSA9IHZhbDtcbiAgICAgICAgICAgIG1lLnJlcXVlc3RSZWRyYXcgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgICB9O1xuICAgIHRoaXMuYW5pbWF0ZVZlY3RvciA9IGZ1bmN0aW9uKHByb3BlcnR5LCByZXN1bHQsIHRpbWUsIGVhc2luZywgY2IpIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgdmFyIGFuaW1YID0gbmV3IEFuaW1hdGlvbih0aGlzLCB0aGlzW3Byb3BlcnR5XS54LCByZXN1bHQueCwgdGltZSwgZWFzaW5nLCBjYik7XG4gICAgICAgIHZhciBhbmltWSA9IG5ldyBBbmltYXRpb24odGhpcywgdGhpc1twcm9wZXJ0eV0ueSwgcmVzdWx0LnksIHRpbWUsIGVhc2luZywgY2IpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChhbmltWCk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKGFuaW1ZKTtcbiAgICAgICAgYW5pbVguc3RhcnQoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICBtZVtwcm9wZXJ0eV0ueCA9IHZhbDtcbiAgICAgICAgICAgIG1lLnJlcXVlc3RSZWRyYXcgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgYW5pbVkuc3RhcnQoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICBtZVtwcm9wZXJ0eV0ueSA9IHZhbDtcbiAgICAgICAgICAgIG1lLnJlcXVlc3RSZWRyYXcgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHRoaXMuc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uKGFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb24uc3RvcCgpO1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmFuaW1hdGlvbnMuaW5kZXhPZihhbmltYXRpb24pO1xuICAgICAgICBpZihpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zdG9wQW5pbWF0aW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmFuaW1hdGlvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1tpXS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0gW107XG4gICAgfTtcbn07XG5cbkRyYXdhYmxlLnByb3RvdHlwZS5zZXRJbWFnZSA9IGZ1bmN0aW9uKGltZ1NyYywgY2IpIHtcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xuICAgIHRoaXMuaW1nLnNyYyA9IGltZ1NyYztcbiAgICBpZih0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicgJiYgdGhpcy5zaG93KSB7XG4gICAgICAgIHRoaXMuaW1nLm9ubG9hZCA9IGNiO1xuICAgIH1cbn07XG5EcmF3YWJsZS5wcm90b3R5cGUuc2V0VGV4dCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSBbXTtcbiAgICB2YXIgdHh0ID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0eHQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMudGV4dC5wdXNoKG5ldyBQYXJhZ3JhcGgodHh0W2ldKSk7XG4gICAgfVxufTtcblxuRHJhd2FibGUucHJvdG90eXBlLmludGVyYWN0aW9uID0gZnVuY3Rpb24obW91c2VQb3MsIHNjYWxlKSB7XG4gICAgdmFyIG1vdXNlRGlmZmVyZW5jZSA9IG1vdXNlUG9zLnN1YlZlY3Rvcih0aGlzLnBvcy5tdWwoc2NhbGUpKTtcbiAgICB2YXIgZGlmZmVyZW5jZSA9IDA7XG4gICAgaWYodGhpcy5yYWRpdXMgIT09IDApIHtcbiAgICAgICAgZGlmZmVyZW5jZSA9IHRoaXMucmFkaXVzICogc2NhbGU7XG4gICAgfVxuICAgIGlmKHRoaXMuc2l6ZS5sZW5ndGgoKSAhPT0gMCkge1xuICAgICAgICBkaWZmZXJlbmNlID0gdGhpcy5zaXplLmxlbmd0aCgpICogc2NhbGU7XG4gICAgfVxuICAgIGlmIChtb3VzZURpZmZlcmVuY2UubGVuZ3RoKCkgPD0gZGlmZmVyZW5jZSAmJiB0aGlzLnNob3cpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07IiwidmFyIENhbnZhcyA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQsIGVsZW1lbnRJZCwgb2JqZWN0cykge1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLm1hcmdpbiA9IG5ldyBWZWN0b3IyRCh4LCB5KTtcbiAgICB0aGlzLmN0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCkuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIHRoaXMuY3R4LmNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICB0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyRCh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgIHRoaXMub2Zmc2V0ID0gbmV3IFZlY3RvcjJEKDAsIDApO1xuICAgIHRoaXMuc2NhbGUgPSAxO1xuXG4gICAgdGhpcy5vYmplY3RzID0gb2JqZWN0cztcbiAgICB0aGlzLnNlbGVjdGVkID0gbnVsbDtcblxuICAgIHRoaXMuc3RhcnRQb3MgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG4gICAgdGhpcy5tb3VzZVBvcyA9IG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICB0aGlzLmZvY3VzID0gbnVsbDtcblxuICAgIHRoaXMubW92aW5nQ2FudmFzID0gbnVsbDtcblxuICAgIHRoaXMuZHJhd0NhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLnBhcnRpYWxDYWxsYmFjayA9IG51bGw7XG5cbiAgICB2YXIgbWUgPSB0aGlzO1xuICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVkcmF3ID0gZmFsc2U7XG4gICAgICAgIG1lLmN0eC5zYXZlKCk7XG4gICAgICAgIG1lLmN0eC50ZXh0QmFzZWxpbmUgPSBcImhhbmdpbmdcIjtcbiAgICAgICAgdmFyIGMgPSBtZS5jZW50ZXIuYWRkVmVjdG9yKG1lLm9mZnNldCk7XG4gICAgICAgIG1lLmN0eC5zZXRUcmFuc2Zvcm0obWUuc2NhbGUsIDAsIDAsIG1lLnNjYWxlLCBjLngsIGMueSk7XG4gICAgICAgIGZvcih2YXIgaSA9IDAsIGwgPSBtZS5vYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYodHlwZW9mIG1lLm9iamVjdHNbaV0ucmVxdWVzdFJlZHJhdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlmKG1lLm9iamVjdHNbaV0ucmVxdWVzdFJlZHJhdygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZHJhdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiBtZS5vYmplY3RzW2ldLnJlcXVlc3RQYXJ0aWFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKG1lLm9iamVjdHNbaV0ucmVxdWVzdFBhcnRpYWwoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWUub2JqZWN0c1tpXS5wYXJ0aWFsKG1lLmN0eCwgbWUuc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWUucGFydGlhbENhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKG1lLm9iamVjdHNbaV0ucmVxdWVzdFJlZHJhdykge1xuICAgICAgICAgICAgICAgICAgICByZWRyYXcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtZS5vYmplY3RzW2ldLnJlcXVlc3RSZWRyYXcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWUuY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgaWYocmVkcmF3KSB7XG4gICAgICAgICAgICBtZS5kcmF3KCk7XG4gICAgICAgIH1cbiAgICB9LCAxMCk7XG59O1xuXG5DYW52YXMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbn07XG5cbkNhbnZhcy5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGNiKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICB0aGlzLmN0eC50ZXh0QmFzZWxpbmUgPSBcImhhbmdpbmdcIjtcbiAgICB2YXIgYyA9IHRoaXMuY2VudGVyLmFkZFZlY3Rvcih0aGlzLm9mZnNldCk7XG4gICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtKHRoaXMuc2NhbGUsIDAsIDAsIHRoaXMuc2NhbGUsIGMueCwgYy55KTtcbiAgICB2YXIgaSwgbDtcbiAgICBmb3IoaSA9IDAsIGwgPSB0aGlzLm9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmKHR5cGVvZiB0aGlzLm9iamVjdHNbaV0ucHJlRHJhdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5vYmplY3RzW2ldLnByZURyYXcodGhpcy5jdHgsIHRoaXMuc2NhbGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcihpID0gMCwgbCA9IHRoaXMub2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5vYmplY3RzW2ldLmRyYXcodGhpcy5jdHgsIHRoaXMuc2NhbGUpO1xuICAgIH1cbiAgICBmb3IoaSA9IDAsIGwgPSB0aGlzLm9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmKHR5cGVvZiB0aGlzLm9iamVjdHNbaV0ucG9zdERyYXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0c1tpXS5wb3N0RHJhdyh0aGlzLmN0eCwgdGhpcy5zY2FsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgIGlmKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYigpO1xuICAgIH1cbiAgICBpZih0eXBlb2YgdGhpcy5kcmF3Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5kcmF3Q2FsbGJhY2soKTtcbiAgICB9XG59O1xuXG5DYW52YXMucHJvdG90eXBlLmZpbmRPYmplY3RPbkNhbnZhcyA9IGZ1bmN0aW9uKGNiKSB7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgZm9yKHZhciBpID0gdGhpcy5vYmplY3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBvID0gdGhpcy5vYmplY3RzW2ldLmludGVyYWN0aW9uKHRoaXMubW91c2VQb3MsIHRoaXMuc2NhbGUpO1xuICAgICAgICBpZihvICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgY2Iobyk7XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZighZm91bmQpIHtcbiAgICAgICAgY2IobnVsbCk7XG4gICAgfVxufTtcblxuQ2FudmFzLnByb3RvdHlwZS5tb3ZlVG9DZW50ZXIgPSBmdW5jdGlvbihjYikge1xuICAgIGlmKHRoaXMubW92aW5nQ2FudmFzID09PSBudWxsKSB7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIHRoaXMubW92aW5nQ2FudmFzID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZihtZS5vZmZzZXQueCA9PT0gMCAmJiBtZS5vZmZzZXQueSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwobWUubW92aW5nQ2FudmFzKTtcbiAgICAgICAgICAgICAgICBtZS5tb3ZpbmdDYW52YXMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGQgPSBtZS5vZmZzZXQ7XG4gICAgICAgICAgICBkID0gZC5kaXYoMzApO1xuICAgICAgICAgICAgbWUub2Zmc2V0ID0gbWUub2Zmc2V0LnN1YlZlY3RvcihkKTtcbiAgICAgICAgICAgIGlmKE1hdGguYWJzKG1lLm9mZnNldC54KSA8PSAxKSB7XG4gICAgICAgICAgICAgICAgbWUub2Zmc2V0LnggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoTWF0aC5hYnMobWUub2Zmc2V0LnkpIDw9IDEpIHtcbiAgICAgICAgICAgICAgICBtZS5vZmZzZXQueSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWUuZHJhdygpO1xuICAgICAgICB9LCAxMCk7XG4gICAgfVxufTtcblxuQ2FudmFzLnByb3RvdHlwZS5pbnRlcmFjdGlvblN0YXJ0ID0gZnVuY3Rpb24oZSwgY2IpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMubW92aW5nQ2FudmFzKTtcbiAgICB0aGlzLm1vdmluZ0NhbnZhcyA9IG51bGw7XG4gICAgdGhpcy5tb3VzZVBvcyA9IG5ldyBWZWN0b3IyRChlLnBhZ2VYLCBlLnBhZ2VZKTtcbiAgICB0aGlzLm1vdXNlUG9zID0gdGhpcy5tb3VzZVBvcy5zdWJWZWN0b3IodGhpcy5tYXJnaW4pO1xuICAgIHRoaXMubW91c2VQb3MgPSB0aGlzLm1vdXNlUG9zLnN1YlZlY3Rvcih0aGlzLmNlbnRlcik7XG4gICAgdGhpcy5tb3VzZVBvcyA9IHRoaXMubW91c2VQb3Muc3ViVmVjdG9yKHRoaXMub2Zmc2V0KTtcbiAgICB2YXIgbW91c2VQb3MgPSB0aGlzLm1vdXNlUG9zO1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICB0aGlzLmZpbmRPYmplY3RPbkNhbnZhcyhmdW5jdGlvbihmb3VuZCkge1xuICAgICAgICB2YXIgc2VsZWN0ZWQgPSBmb3VuZDtcbiAgICAgICAgaWYoc2VsZWN0ZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkID0gXCJzZWxmXCI7XG4gICAgICAgICAgICBtb3VzZVBvcyA9IG1vdXNlUG9zLmFkZFZlY3RvcihvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2Ioc2VsZWN0ZWQsIG1vdXNlUG9zKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuQ2FudmFzLnByb3RvdHlwZS5pbnRlcmFjdGlvbk1vdmUgPSBmdW5jdGlvbihlLCBjYikge1xuICAgIHZhciBuZXdQb3MgPSBuZXcgVmVjdG9yMkQoZS5wYWdlWCwgZS5wYWdlWSk7XG4gICAgbmV3UG9zID0gbmV3UG9zLnN1YlZlY3Rvcih0aGlzLm1hcmdpbik7XG4gICAgbmV3UG9zID0gbmV3UG9zLnN1YlZlY3Rvcih0aGlzLmNlbnRlcik7XG4gICAgdmFyIGRpZmZlcmVuY2UgPSBuZXdQb3Muc3ViVmVjdG9yKHRoaXMubW91c2VQb3MpO1xuICAgIHRoaXMubW91c2VQb3MgPSBuZXdQb3M7XG4gICAgaWYodGhpcy5zZWxlY3RlZCA9PT0gXCJzZWxmXCIpIHtcbiAgICAgICAgdGhpcy5zdGFydFBvcyA9IHRoaXMuc3RhcnRQb3MuYWRkVmVjdG9yKGRpZmZlcmVuY2UpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IHRoaXMub2Zmc2V0LmFkZFZlY3RvcihkaWZmZXJlbmNlKTtcbiAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgfSBlbHNlIGlmKHRoaXMuc2VsZWN0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdGFydFBvcyA9IHRoaXMuc3RhcnRQb3MuYWRkVmVjdG9yKGRpZmZlcmVuY2UpO1xuICAgICAgICB0aGlzLm1vdXNlUG9zID0gdGhpcy5tb3VzZVBvcy5zdWJWZWN0b3IodGhpcy5vZmZzZXQpO1xuICAgICAgICBjYih0aGlzLnNlbGVjdGVkLCB0aGlzLm1vdXNlUG9zLm11bCgxIC8gdGhpcy5zY2FsZSkpO1xuICAgIH1cbn07XG5cbkNhbnZhcy5wcm90b3R5cGUuaW50ZXJhY3Rpb25TdG9wID0gZnVuY3Rpb24oY2IpIHtcbiAgICBpZih0aGlzLnN0YXJ0UG9zLmxlbmd0aCgpIDw9IDEwKSB7XG4gICAgICAgIGNiKHRoaXMuc2VsZWN0ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKG51bGwpO1xuICAgIH1cbiAgICB0aGlzLnN0YXJ0UG9zID0gbmV3IFZlY3RvcjJEKDAsIDApO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBudWxsO1xuICAgIHRoaXMubW91c2VQb3MgPSBuZXcgVmVjdG9yMkQoMCwgMCk7XG59OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
